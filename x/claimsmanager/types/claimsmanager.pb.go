// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/claimsmanager/v1/claimsmanager.proto

package types

import (
	encoding_json "encoding/json"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	crypto "github.com/tendermint/tendermint/proto/tendermint/crypto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimType int32

const (
	// Undefined action (per protobuf spec)
	ClaimTypeUndefined     ClaimType = 0
	ClaimTypeLiquidToken   ClaimType = 1
	ClaimTypeOsmosisPool   ClaimType = 2
	ClaimTypeCrescentPool  ClaimType = 3 // Deprecated: Do not use.
	ClaimTypeSifchainPool  ClaimType = 4 // Deprecated: Do not use.
	ClaimTypeUmeeToken     ClaimType = 5
	ClaimTypeOsmosisCLPool ClaimType = 6
)

var ClaimType_name = map[int32]string{
	0: "ClaimTypeUndefined",
	1: "ClaimTypeLiquidToken",
	2: "ClaimTypeOsmosisPool",
	3: "ClaimTypeCrescentPool",
	4: "ClaimTypeSifchainPool",
	5: "ClaimTypeUmeeToken",
	6: "ClaimTypeOsmosisCLPool",
}

var ClaimType_value = map[string]int32{
	"ClaimTypeUndefined":     0,
	"ClaimTypeLiquidToken":   1,
	"ClaimTypeOsmosisPool":   2,
	"ClaimTypeCrescentPool":  3,
	"ClaimTypeSifchainPool":  4,
	"ClaimTypeUmeeToken":     5,
	"ClaimTypeOsmosisCLPool": 6,
}

func (x ClaimType) String() string {
	return proto.EnumName(ClaimType_name, int32(x))
}

func (ClaimType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{0}
}

type ProtocolDataType int32

const (
	// Undefined action (per protobuf spec)
	ProtocolDataTypeUndefined                     ProtocolDataType = 0
	ProtocolDataTypeConnection                    ProtocolDataType = 1
	ProtocolDataTypeOsmosisParams                 ProtocolDataType = 2
	ProtocolDataTypeLiquidToken                   ProtocolDataType = 3
	ProtocolDataTypeOsmosisPool                   ProtocolDataType = 4
	ProtocolDataTypeCrescentPool                  ProtocolDataType = 5 // Deprecated: Do not use.
	ProtocolDataTypeSifchainPool                  ProtocolDataType = 6 // Deprecated: Do not use.
	ProtocolDataTypeUmeeParams                    ProtocolDataType = 7
	ProtocolDataTypeUmeeReserves                  ProtocolDataType = 8
	ProtocolDataTypeUmeeInterestScalar            ProtocolDataType = 9
	ProtocolDataTypeUmeeTotalBorrows              ProtocolDataType = 10
	ProtocolDataTypeUmeeUTokenSupply              ProtocolDataType = 11
	ProtocolDataTypeUmeeLeverageModuleBalance     ProtocolDataType = 12
	ProtocolDataTypeCrescentParams                ProtocolDataType = 13 // Deprecated: Do not use.
	ProtocolDataTypeCrescentReserveAddressBalance ProtocolDataType = 14 // Deprecated: Do not use.
	ProtocolDataTypeCrescentPoolCoinSupply        ProtocolDataType = 15 // Deprecated: Do not use.
	ProtocolDataTypeOsmosisCLPool                 ProtocolDataType = 16
)

var ProtocolDataType_name = map[int32]string{
	0:  "ProtocolDataTypeUndefined",
	1:  "ProtocolDataTypeConnection",
	2:  "ProtocolDataTypeOsmosisParams",
	3:  "ProtocolDataTypeLiquidToken",
	4:  "ProtocolDataTypeOsmosisPool",
	5:  "ProtocolDataTypeCrescentPool",
	6:  "ProtocolDataTypeSifchainPool",
	7:  "ProtocolDataTypeUmeeParams",
	8:  "ProtocolDataTypeUmeeReserves",
	9:  "ProtocolDataTypeUmeeInterestScalar",
	10: "ProtocolDataTypeUmeeTotalBorrows",
	11: "ProtocolDataTypeUmeeUTokenSupply",
	12: "ProtocolDataTypeUmeeLeverageModuleBalance",
	13: "ProtocolDataTypeCrescentParams",
	14: "ProtocolDataTypeCrescentReserveAddressBalance",
	15: "ProtocolDataTypeCrescentPoolCoinSupply",
	16: "ProtocolDataTypeOsmosisCLPool",
}

var ProtocolDataType_value = map[string]int32{
	"ProtocolDataTypeUndefined":                     0,
	"ProtocolDataTypeConnection":                    1,
	"ProtocolDataTypeOsmosisParams":                 2,
	"ProtocolDataTypeLiquidToken":                   3,
	"ProtocolDataTypeOsmosisPool":                   4,
	"ProtocolDataTypeCrescentPool":                  5,
	"ProtocolDataTypeSifchainPool":                  6,
	"ProtocolDataTypeUmeeParams":                    7,
	"ProtocolDataTypeUmeeReserves":                  8,
	"ProtocolDataTypeUmeeInterestScalar":            9,
	"ProtocolDataTypeUmeeTotalBorrows":              10,
	"ProtocolDataTypeUmeeUTokenSupply":              11,
	"ProtocolDataTypeUmeeLeverageModuleBalance":     12,
	"ProtocolDataTypeCrescentParams":                13,
	"ProtocolDataTypeCrescentReserveAddressBalance": 14,
	"ProtocolDataTypeCrescentPoolCoinSupply":        15,
	"ProtocolDataTypeOsmosisCLPool":                 16,
}

func (x ProtocolDataType) String() string {
	return proto.EnumName(ProtocolDataType_name, int32(x))
}

func (ProtocolDataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{1}
}

// Params holds parameters for the claimsmanager module.
type Params struct {
	ClaimsEnabled bool `protobuf:"varint,1,opt,name=claims_enabled,json=claimsEnabled,proto3" json:"claims_enabled,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type ClaimableEvent struct {
	EventModule  string           `protobuf:"bytes,1,opt,name=event_module,json=eventModule,proto3" json:"event_module,omitempty"`
	EventName    string           `protobuf:"bytes,2,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	Heights      map[string]int64 `protobuf:"bytes,3,rep,name=heights,proto3" json:"heights,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MaxClaimTime time.Time        `protobuf:"bytes,4,opt,name=max_claim_time,json=maxClaimTime,proto3,stdtime" json:"max_claim_time"`
}

func (m *ClaimableEvent) Reset()         { *m = ClaimableEvent{} }
func (m *ClaimableEvent) String() string { return proto.CompactTextString(m) }
func (*ClaimableEvent) ProtoMessage()    {}
func (*ClaimableEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{1}
}
func (m *ClaimableEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableEvent.Merge(m, src)
}
func (m *ClaimableEvent) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableEvent proto.InternalMessageInfo

func (m *ClaimableEvent) GetEventModule() string {
	if m != nil {
		return m.EventModule
	}
	return ""
}

func (m *ClaimableEvent) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *ClaimableEvent) GetHeights() map[string]int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

func (m *ClaimableEvent) GetMaxClaimTime() time.Time {
	if m != nil {
		return m.MaxClaimTime
	}
	return time.Time{}
}

// Claim define the users claim for holding assets within a given zone.
type Claim struct {
	UserAddress   string                                 `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	ChainId       string                                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Module        ClaimType                              `protobuf:"varint,3,opt,name=module,proto3,enum=quicksilver.claimsmanager.v1.ClaimType" json:"module,omitempty"`
	SourceChainId string                                 `protobuf:"bytes,4,opt,name=source_chain_id,json=sourceChainId,proto3" json:"source_chain_id,omitempty"`
	XAmount       uint64                                 `protobuf:"varint,5,opt,name=_amount,json=Amount,proto3" json:"_amount,omitempty"` // Deprecated: Do not use.
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *Claim) Reset()         { *m = Claim{} }
func (m *Claim) String() string { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()    {}
func (*Claim) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{2}
}
func (m *Claim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Claim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Claim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Claim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Claim.Merge(m, src)
}
func (m *Claim) XXX_Size() int {
	return m.Size()
}
func (m *Claim) XXX_DiscardUnknown() {
	xxx_messageInfo_Claim.DiscardUnknown(m)
}

var xxx_messageInfo_Claim proto.InternalMessageInfo

// Proof defines a type used to cryptographically prove a claim.
type Proof struct {
	Key       []byte           `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data      []byte           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ProofOps  *crypto.ProofOps `protobuf:"bytes,3,opt,name=proof_ops,proto3" json:"proof_ops,omitempty"`
	Height    int64            `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	ProofType string           `protobuf:"bytes,5,opt,name=proof_type,proto3" json:"proof_type,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{3}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

type KeyedProtocolData struct {
	Key          string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ProtocolData *ProtocolData `protobuf:"bytes,2,opt,name=protocol_data,json=protocolData,proto3" json:"protocol_data,omitempty"`
}

func (m *KeyedProtocolData) Reset()         { *m = KeyedProtocolData{} }
func (m *KeyedProtocolData) String() string { return proto.CompactTextString(m) }
func (*KeyedProtocolData) ProtoMessage()    {}
func (*KeyedProtocolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{4}
}
func (m *KeyedProtocolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyedProtocolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyedProtocolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyedProtocolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyedProtocolData.Merge(m, src)
}
func (m *KeyedProtocolData) XXX_Size() int {
	return m.Size()
}
func (m *KeyedProtocolData) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyedProtocolData.DiscardUnknown(m)
}

var xxx_messageInfo_KeyedProtocolData proto.InternalMessageInfo

func (m *KeyedProtocolData) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyedProtocolData) GetProtocolData() *ProtocolData {
	if m != nil {
		return m.ProtocolData
	}
	return nil
}

// Protocol Data is an arbitrary data type held against a given zone for the
// determination of rewards.
type ProtocolData struct {
	Type string                   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Data encoding_json.RawMessage `protobuf:"bytes,2,opt,name=data,proto3,casttype=encoding/json.RawMessage" json:"data,omitempty"`
}

func (m *ProtocolData) Reset()         { *m = ProtocolData{} }
func (m *ProtocolData) String() string { return proto.CompactTextString(m) }
func (*ProtocolData) ProtoMessage()    {}
func (*ProtocolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_086999747d797382, []int{5}
}
func (m *ProtocolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtocolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtocolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtocolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtocolData.Merge(m, src)
}
func (m *ProtocolData) XXX_Size() int {
	return m.Size()
}
func (m *ProtocolData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtocolData.DiscardUnknown(m)
}

var xxx_messageInfo_ProtocolData proto.InternalMessageInfo

func (m *ProtocolData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ProtocolData) GetData() encoding_json.RawMessage {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("quicksilver.claimsmanager.v1.ClaimType", ClaimType_name, ClaimType_value)
	proto.RegisterEnum("quicksilver.claimsmanager.v1.ProtocolDataType", ProtocolDataType_name, ProtocolDataType_value)
	proto.RegisterType((*Params)(nil), "quicksilver.claimsmanager.v1.Params")
	proto.RegisterType((*ClaimableEvent)(nil), "quicksilver.claimsmanager.v1.ClaimableEvent")
	proto.RegisterMapType((map[string]int64)(nil), "quicksilver.claimsmanager.v1.ClaimableEvent.HeightsEntry")
	proto.RegisterType((*Claim)(nil), "quicksilver.claimsmanager.v1.Claim")
	proto.RegisterType((*Proof)(nil), "quicksilver.claimsmanager.v1.Proof")
	proto.RegisterType((*KeyedProtocolData)(nil), "quicksilver.claimsmanager.v1.KeyedProtocolData")
	proto.RegisterType((*ProtocolData)(nil), "quicksilver.claimsmanager.v1.ProtocolData")
}

func init() {
	proto.RegisterFile("quicksilver/claimsmanager/v1/claimsmanager.proto", fileDescriptor_086999747d797382)
}

var fileDescriptor_086999747d797382 = []byte{
	// 1070 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0xfa, 0x2b, 0xf6, 0x6b, 0x27, 0x5d, 0x46, 0x21, 0x72, 0x9c, 0xc4, 0x76, 0xad, 0x12,
	0x42, 0x24, 0xaf, 0xdb, 0x20, 0x24, 0x12, 0x40, 0xa8, 0x36, 0x91, 0x08, 0xa4, 0x24, 0xda, 0xb8,
	0x42, 0xe2, 0xb2, 0x9a, 0xec, 0x4e, 0x36, 0x4b, 0x76, 0x67, 0xb6, 0x3b, 0x6b, 0x37, 0xe6, 0x17,
	0xf4, 0xd8, 0x23, 0x37, 0x2a, 0x71, 0xe3, 0xc2, 0xa5, 0x7f, 0x80, 0x5b, 0x6f, 0x54, 0x3d, 0x21,
	0x0e, 0x01, 0x25, 0x17, 0x7e, 0x03, 0x27, 0xb4, 0x33, 0x6b, 0x77, 0xed, 0x38, 0x11, 0xa7, 0xcc,
	0x3c, 0xcf, 0x33, 0xef, 0xc7, 0x33, 0xef, 0x4e, 0x0c, 0xf7, 0x9f, 0xf4, 0x1d, 0xf3, 0x8c, 0x3b,
	0xee, 0x80, 0x04, 0x6d, 0xd3, 0xc5, 0x8e, 0xc7, 0x3d, 0x4c, 0xb1, 0x4d, 0x82, 0xf6, 0xe0, 0xc1,
	0x24, 0xa0, 0xf9, 0x01, 0x0b, 0x19, 0x5a, 0x4d, 0x9c, 0xd0, 0x26, 0x05, 0x83, 0x07, 0xd5, 0x65,
	0x93, 0x71, 0x8f, 0x71, 0x43, 0x68, 0xdb, 0x72, 0x23, 0x0f, 0x56, 0x17, 0x6d, 0x66, 0x33, 0x89,
	0x47, 0xab, 0x18, 0xad, 0xdb, 0x8c, 0xd9, 0x2e, 0x69, 0x8b, 0xdd, 0x71, 0xff, 0xa4, 0x1d, 0x3a,
	0x1e, 0xe1, 0x21, 0xf6, 0xfc, 0x58, 0xb0, 0x16, 0x12, 0x6a, 0x91, 0xc0, 0x73, 0x68, 0xd8, 0x36,
	0x83, 0xa1, 0x1f, 0xb2, 0x48, 0xcb, 0x4e, 0x24, 0xdd, 0xdc, 0x86, 0xfc, 0x21, 0x0e, 0xb0, 0xc7,
	0xd1, 0x7b, 0xb0, 0x20, 0xcb, 0x31, 0x08, 0xc5, 0xc7, 0x2e, 0xb1, 0x2a, 0x4a, 0x43, 0xd9, 0x28,
	0xe8, 0xf3, 0x12, 0xdd, 0x95, 0xe0, 0x4e, 0xe1, 0xd9, 0x8b, 0x7a, 0xea, 0xc7, 0x17, 0xf5, 0x54,
	0xf3, 0xd7, 0x34, 0x2c, 0x74, 0x23, 0x2e, 0x22, 0x76, 0x07, 0x84, 0x86, 0xe8, 0x2e, 0x94, 0x49,
	0xb4, 0x30, 0x3c, 0x66, 0xf5, 0x5d, 0x22, 0x22, 0x14, 0xf5, 0x92, 0xc0, 0x1e, 0x09, 0x08, 0xad,
	0x01, 0x48, 0x09, 0xc5, 0x1e, 0xa9, 0xa4, 0x85, 0xa0, 0x28, 0x90, 0x6f, 0xb0, 0x47, 0xd0, 0x11,
	0xcc, 0x9d, 0x12, 0xc7, 0x3e, 0x0d, 0x79, 0x25, 0xd3, 0xc8, 0x6c, 0x94, 0xb6, 0xb6, 0xb5, 0xdb,
	0x0c, 0xd3, 0x26, 0x0b, 0xd0, 0xbe, 0x94, 0x67, 0x77, 0x69, 0x18, 0x0c, 0xf5, 0x51, 0x24, 0xf4,
	0x15, 0x2c, 0x78, 0xf8, 0xdc, 0x10, 0x87, 0x8d, 0xc8, 0xa0, 0x4a, 0xb6, 0xa1, 0x6c, 0x94, 0xb6,
	0xaa, 0x9a, 0x74, 0x4f, 0x1b, 0xb9, 0xa7, 0xf5, 0x46, 0xee, 0x75, 0x0a, 0xaf, 0x2e, 0xea, 0xa9,
	0xe7, 0x7f, 0xd5, 0x15, 0xbd, 0xec, 0xe1, 0x73, 0x91, 0x26, 0x22, 0xab, 0x3b, 0x50, 0x4e, 0x26,
	0x41, 0x2a, 0x64, 0xce, 0xc8, 0x30, 0xee, 0x34, 0x5a, 0xa2, 0x45, 0xc8, 0x0d, 0xb0, 0xdb, 0x97,
	0xcd, 0x65, 0x74, 0xb9, 0xd9, 0x49, 0x7f, 0xac, 0x34, 0x7f, 0x4b, 0x43, 0x4e, 0x44, 0x42, 0x9f,
	0x40, 0xb9, 0xcf, 0x49, 0x60, 0x60, 0xcb, 0x0a, 0x08, 0xe7, 0xf2, 0x78, 0xa7, 0xf2, 0xe6, 0x65,
	0x6b, 0x31, 0xbe, 0xf4, 0x87, 0x92, 0x39, 0x0a, 0x03, 0x87, 0xda, 0x7a, 0x29, 0x52, 0xc7, 0x10,
	0x5a, 0x86, 0x82, 0x79, 0x8a, 0x1d, 0x6a, 0x38, 0x56, 0x6c, 0xe0, 0x9c, 0xd8, 0xef, 0x59, 0xe8,
	0x73, 0xc8, 0xc7, 0xd6, 0x67, 0x1a, 0xca, 0xc6, 0xc2, 0xd6, 0xfb, 0xff, 0xc3, 0xbd, 0xde, 0xd0,
	0x27, 0x7a, 0x7c, 0x0c, 0xad, 0xc3, 0x1d, 0xce, 0xfa, 0x81, 0x49, 0x8c, 0x71, 0x8a, 0xac, 0x48,
	0x31, 0x2f, 0xe1, 0x6e, 0x9c, 0x68, 0x05, 0xe6, 0x0c, 0xec, 0xb1, 0x3e, 0x0d, 0x2b, 0xb9, 0x86,
	0xb2, 0x91, 0xed, 0xa4, 0x2b, 0x8a, 0x9e, 0x7f, 0x28, 0x10, 0xd4, 0x83, 0x7c, 0xcc, 0xe5, 0x45,
	0x5f, 0x9f, 0x46, 0x5e, 0xfe, 0x79, 0x51, 0x5f, 0xb7, 0x9d, 0xf0, 0xb4, 0x7f, 0xac, 0x99, 0xcc,
	0x8b, 0x67, 0x3b, 0xfe, 0xd3, 0xe2, 0xd6, 0x59, 0x3b, 0x1c, 0xfa, 0x84, 0x6b, 0x7b, 0x34, 0x7c,
	0xf3, 0xb2, 0x05, 0xb1, 0x0b, 0x7b, 0x34, 0xd4, 0xe3, 0x58, 0x3b, 0xd9, 0x68, 0xf2, 0x9a, 0xbf,
	0x28, 0x90, 0x3b, 0x8c, 0x06, 0x38, 0xe9, 0x7c, 0x59, 0x3a, 0x8f, 0x20, 0x6b, 0xe1, 0x10, 0x0b,
	0x53, 0xca, 0xba, 0x58, 0xa3, 0x6d, 0x28, 0x8a, 0x79, 0x37, 0x98, 0xcf, 0x85, 0x29, 0xa5, 0xad,
	0x15, 0xed, 0xed, 0x37, 0xa1, 0xc9, 0x6f, 0x42, 0x13, 0x21, 0x0f, 0x7c, 0xae, 0xbf, 0x55, 0xa3,
	0x25, 0xc8, 0xcb, 0x09, 0x12, 0x16, 0x64, 0xf4, 0x78, 0x87, 0x6a, 0x00, 0x52, 0x14, 0x55, 0x2c,
	0xda, 0x2f, 0xea, 0x09, 0x44, 0x7e, 0x22, 0xff, 0x44, 0xc5, 0x0e, 0xe0, 0x9d, 0xaf, 0xc9, 0x90,
	0x58, 0x87, 0xd1, 0x7c, 0x99, 0xcc, 0xfd, 0x22, 0xaa, 0xe8, 0xfa, 0xc4, 0x1c, 0xc0, 0xbc, 0x1f,
	0x2b, 0x8c, 0x71, 0x03, 0xa5, 0xad, 0xcd, 0xdb, 0x2f, 0x2f, 0x19, 0x54, 0x2f, 0xfb, 0x89, 0x5d,
	0xb3, 0x07, 0xe5, 0x89, 0x94, 0x08, 0xb2, 0xa2, 0x56, 0x99, 0x53, 0xac, 0xd1, 0xfd, 0xa4, 0x59,
	0x9d, 0xd5, 0x7f, 0x2f, 0xea, 0x15, 0x42, 0x4d, 0x66, 0x39, 0xd4, 0x6e, 0x7f, 0xcf, 0x19, 0xd5,
	0x74, 0xfc, 0xf4, 0x11, 0xe1, 0x1c, 0xdb, 0x44, 0x5a, 0xb9, 0xf9, 0xbb, 0x02, 0xc5, 0xf1, 0xc4,
	0xa0, 0x25, 0x40, 0xe3, 0xcd, 0x63, 0x6a, 0x91, 0x13, 0x87, 0x12, 0x4b, 0x4d, 0xa1, 0x0a, 0x2c,
	0x8e, 0xf1, 0x7d, 0xe7, 0x49, 0xdf, 0xb1, 0x7a, 0xec, 0x8c, 0x50, 0x55, 0x99, 0x60, 0x0e, 0xa2,
	0xeb, 0x75, 0xf8, 0x21, 0x63, 0xae, 0x9a, 0x46, 0x6b, 0xf0, 0xee, 0x98, 0xe9, 0x06, 0x84, 0x9b,
	0x84, 0x86, 0x82, 0xca, 0x54, 0xd3, 0x05, 0x65, 0x82, 0x3e, 0x72, 0x4e, 0xc4, 0x64, 0x0a, 0x3a,
	0x2b, 0xe8, 0x89, 0x4a, 0x3c, 0x42, 0x64, 0xbe, 0x1c, 0xaa, 0xc2, 0xd2, 0x74, 0xbe, 0xee, 0xbe,
	0x38, 0x97, 0xaf, 0x66, 0x9f, 0xfd, 0x5c, 0x4b, 0x6d, 0xfe, 0x94, 0x03, 0x35, 0x69, 0x94, 0x68,
	0x6c, 0x0d, 0x96, 0xa7, 0xb1, 0x64, 0x7f, 0x35, 0xa8, 0x4e, 0xd3, 0x5d, 0x46, 0x29, 0x31, 0x43,
	0x87, 0x45, 0x5d, 0xde, 0x85, 0xb5, 0x69, 0x7e, 0xd4, 0xac, 0x78, 0x68, 0xd5, 0x34, 0xaa, 0xc3,
	0xca, 0xb4, 0x24, 0xe9, 0x54, 0x66, 0x96, 0x20, 0x69, 0x58, 0x16, 0xdd, 0x83, 0xd5, 0x6b, 0x45,
	0x24, 0x7d, 0xcb, 0x09, 0x63, 0x66, 0xa8, 0x26, 0xec, 0xcb, 0x0b, 0xd5, 0x8c, 0x86, 0x22, 0x17,
	0xe3, 0x6a, 0xe7, 0x50, 0xe3, 0x7a, 0x94, 0x88, 0xd7, 0x09, 0x27, 0xc1, 0x80, 0x70, 0xb5, 0x80,
	0xd6, 0xa1, 0x39, 0x4b, 0xb1, 0x47, 0x43, 0x12, 0x10, 0x1e, 0x1e, 0x99, 0xd8, 0xc5, 0x81, 0x5a,
	0x44, 0xf7, 0xa0, 0x31, 0x4b, 0xd7, 0x63, 0x21, 0x76, 0x3b, 0x2c, 0x08, 0xd8, 0x53, 0xae, 0xc2,
	0x4d, 0xaa, 0xc7, 0xc2, 0x9c, 0xa3, 0xbe, 0xef, 0xbb, 0x43, 0xb5, 0x84, 0x5a, 0xf0, 0xc1, 0x2c,
	0xd5, 0x3e, 0x19, 0x90, 0x00, 0xdb, 0x44, 0xfe, 0xb7, 0xe9, 0x60, 0x17, 0x53, 0x93, 0xa8, 0x65,
	0xb4, 0x0e, 0xb5, 0x1b, 0x0d, 0x93, 0x8d, 0xce, 0x0b, 0x33, 0x3e, 0x82, 0xd6, 0x4d, 0xba, 0xb8,
	0xe1, 0xf8, 0x15, 0x1e, 0x85, 0x5e, 0x10, 0xc7, 0x34, 0x58, 0xbf, 0xed, 0x3e, 0xba, 0xcc, 0x19,
	0x55, 0x7e, 0x47, 0xe8, 0x6f, 0x1e, 0x92, 0x78, 0x42, 0x55, 0x39, 0xa1, 0x9d, 0x6f, 0x5f, 0x5d,
	0xd6, 0x94, 0xd7, 0x97, 0x35, 0xe5, 0xef, 0xcb, 0x9a, 0xf2, 0xfc, 0xaa, 0x96, 0x7a, 0x7d, 0x55,
	0x4b, 0xfd, 0x71, 0x55, 0x4b, 0x7d, 0xf7, 0x59, 0xe2, 0x31, 0x4d, 0xbc, 0x13, 0xad, 0x1f, 0x18,
	0x25, 0x49, 0xa0, 0x7d, 0x3e, 0xf5, 0xc3, 0x44, 0xbc, 0xb3, 0xc7, 0x79, 0xf1, 0x60, 0x7c, 0xf8,
	0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x0c, 0xee, 0x24, 0xc2, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimsEnabled {
		i--
		if m.ClaimsEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimableEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.MaxClaimTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MaxClaimTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintClaimsmanager(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Heights) > 0 {
		for k := range m.Heights {
			v := m.Heights[k]
			baseI := i
			i = encodeVarintClaimsmanager(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintClaimsmanager(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintClaimsmanager(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EventName) > 0 {
		i -= len(m.EventName)
		copy(dAtA[i:], m.EventName)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.EventName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EventModule) > 0 {
		i -= len(m.EventModule)
		copy(dAtA[i:], m.EventModule)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.EventModule)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Claim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Claim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Claim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClaimsmanager(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.XAmount != 0 {
		i = encodeVarintClaimsmanager(dAtA, i, uint64(m.XAmount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourceChainId) > 0 {
		i -= len(m.SourceChainId)
		copy(dAtA[i:], m.SourceChainId)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.SourceChainId)))
		i--
		dAtA[i] = 0x22
	}
	if m.Module != 0 {
		i = encodeVarintClaimsmanager(dAtA, i, uint64(m.Module))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProofType) > 0 {
		i -= len(m.ProofType)
		copy(dAtA[i:], m.ProofType)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.ProofType)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Height != 0 {
		i = encodeVarintClaimsmanager(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.ProofOps != nil {
		{
			size, err := m.ProofOps.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClaimsmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyedProtocolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyedProtocolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyedProtocolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProtocolData != nil {
		{
			size, err := m.ProtocolData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintClaimsmanager(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtocolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtocolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtocolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintClaimsmanager(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaimsmanager(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaimsmanager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClaimsEnabled {
		n += 2
	}
	return n
}

func (m *ClaimableEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EventModule)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	l = len(m.EventName)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if len(m.Heights) > 0 {
		for k, v := range m.Heights {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovClaimsmanager(uint64(len(k))) + 1 + sovClaimsmanager(uint64(v))
			n += mapEntrySize + 1 + sovClaimsmanager(uint64(mapEntrySize))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MaxClaimTime)
	n += 1 + l + sovClaimsmanager(uint64(l))
	return n
}

func (m *Claim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if m.Module != 0 {
		n += 1 + sovClaimsmanager(uint64(m.Module))
	}
	l = len(m.SourceChainId)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if m.XAmount != 0 {
		n += 1 + sovClaimsmanager(uint64(m.XAmount))
	}
	l = m.Amount.Size()
	n += 1 + l + sovClaimsmanager(uint64(l))
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if m.ProofOps != nil {
		l = m.ProofOps.Size()
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovClaimsmanager(uint64(m.Height))
	}
	l = len(m.ProofType)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	return n
}

func (m *KeyedProtocolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	if m.ProtocolData != nil {
		l = m.ProtocolData.Size()
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	return n
}

func (m *ProtocolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovClaimsmanager(uint64(l))
	}
	return n
}

func sovClaimsmanager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaimsmanager(x uint64) (n int) {
	return sovClaimsmanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClaimsEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimableEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventModule", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventModule = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Heights == nil {
				m.Heights = make(map[string]int64)
			}
			var mapkey string
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowClaimsmanager
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClaimsmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthClaimsmanager
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthClaimsmanager
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowClaimsmanager
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipClaimsmanager(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthClaimsmanager
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Heights[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClaimTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.MaxClaimTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Claim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Claim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Claim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			m.Module = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Module |= ClaimType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAmount", wireType)
			}
			m.XAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.XAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofOps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProofOps == nil {
				m.ProofOps = &crypto.ProofOps{}
			}
			if err := m.ProofOps.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyedProtocolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyedProtocolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyedProtocolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProtocolData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProtocolData == nil {
				m.ProtocolData = &ProtocolData{}
			}
			if err := m.ProtocolData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtocolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtocolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtocolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaimsmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaimsmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaimsmanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaimsmanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaimsmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaimsmanager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaimsmanager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaimsmanager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaimsmanager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaimsmanager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaimsmanager = fmt.Errorf("proto: unexpected end of group")
)
