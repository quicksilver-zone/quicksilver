// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/interchainstaking/v1/interchainstaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Zone struct {
	ConnectionId                 string                                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	ChainId                      string                                 `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	DepositAddress               *ICAAccount                            `protobuf:"bytes,3,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address,omitempty"`
	WithdrawalAddress            *ICAAccount                            `protobuf:"bytes,4,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	PerformanceAddress           *ICAAccount                            `protobuf:"bytes,5,opt,name=performance_address,json=performanceAddress,proto3" json:"performance_address,omitempty"`
	DelegationAddress            *ICAAccount                            `protobuf:"bytes,6,opt,name=delegation_address,json=delegationAddress,proto3" json:"delegation_address,omitempty"`
	AccountPrefix                string                                 `protobuf:"bytes,7,opt,name=account_prefix,json=accountPrefix,proto3" json:"account_prefix,omitempty"`
	LocalDenom                   string                                 `protobuf:"bytes,8,opt,name=local_denom,json=localDenom,proto3" json:"local_denom,omitempty"`
	BaseDenom                    string                                 `protobuf:"bytes,9,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	RedemptionRate               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=redemption_rate,json=redemptionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"redemption_rate"`
	LastRedemptionRate           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=last_redemption_rate,json=lastRedemptionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"last_redemption_rate"`
	Validators                   []*Validator                           `protobuf:"bytes,12,rep,name=validators,proto3" json:"validators,omitempty"`
	AggregateIntent              ValidatorIntents                       `protobuf:"bytes,13,rep,name=aggregate_intent,json=aggregateIntent,proto3,castrepeated=ValidatorIntents" json:"aggregate_intent,omitempty"`
	MultiSend                    bool                                   `protobuf:"varint,14,opt,name=multi_send,json=multiSend,proto3" json:"multi_send,omitempty"`
	LiquidityModule              bool                                   `protobuf:"varint,15,opt,name=liquidity_module,json=liquidityModule,proto3" json:"liquidity_module,omitempty"`
	WithdrawalWaitgroup          uint32                                 `protobuf:"varint,16,opt,name=withdrawal_waitgroup,json=withdrawalWaitgroup,proto3" json:"withdrawal_waitgroup,omitempty"`
	IbcNextValidatorsHash        []byte                                 `protobuf:"bytes,17,opt,name=ibc_next_validators_hash,json=ibcNextValidatorsHash,proto3" json:"ibc_next_validators_hash,omitempty"`
	ValidatorSelectionAllocation uint64                                 `protobuf:"varint,18,opt,name=validator_selection_allocation,json=validatorSelectionAllocation,proto3" json:"validator_selection_allocation,omitempty"`
	HoldingsAllocation           uint64                                 `protobuf:"varint,19,opt,name=holdings_allocation,json=holdingsAllocation,proto3" json:"holdings_allocation,omitempty"`
	LastEpochHeight              int64                                  `protobuf:"varint,20,opt,name=last_epoch_height,json=lastEpochHeight,proto3" json:"last_epoch_height,omitempty"`
	Tvl                          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=tvl,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tvl"`
	UnbondingPeriod              int64                                  `protobuf:"varint,22,opt,name=unbonding_period,json=unbondingPeriod,proto3" json:"unbonding_period,omitempty"`
	MessagesPerTx                int64                                  `protobuf:"varint,23,opt,name=messages_per_tx,json=messagesPerTx,proto3" json:"messages_per_tx,omitempty"`
}

func (m *Zone) Reset()         { *m = Zone{} }
func (m *Zone) String() string { return proto.CompactTextString(m) }
func (*Zone) ProtoMessage()    {}
func (*Zone) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{0}
}
func (m *Zone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Zone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Zone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Zone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Zone.Merge(m, src)
}
func (m *Zone) XXX_Size() int {
	return m.Size()
}
func (m *Zone) XXX_DiscardUnknown() {
	xxx_messageInfo_Zone.DiscardUnknown(m)
}

var xxx_messageInfo_Zone proto.InternalMessageInfo

func (m *Zone) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *Zone) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Zone) GetDepositAddress() *ICAAccount {
	if m != nil {
		return m.DepositAddress
	}
	return nil
}

func (m *Zone) GetWithdrawalAddress() *ICAAccount {
	if m != nil {
		return m.WithdrawalAddress
	}
	return nil
}

func (m *Zone) GetPerformanceAddress() *ICAAccount {
	if m != nil {
		return m.PerformanceAddress
	}
	return nil
}

func (m *Zone) GetDelegationAddress() *ICAAccount {
	if m != nil {
		return m.DelegationAddress
	}
	return nil
}

func (m *Zone) GetAccountPrefix() string {
	if m != nil {
		return m.AccountPrefix
	}
	return ""
}

func (m *Zone) GetLocalDenom() string {
	if m != nil {
		return m.LocalDenom
	}
	return ""
}

func (m *Zone) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *Zone) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *Zone) GetAggregateIntent() ValidatorIntents {
	if m != nil {
		return m.AggregateIntent
	}
	return nil
}

func (m *Zone) GetMultiSend() bool {
	if m != nil {
		return m.MultiSend
	}
	return false
}

func (m *Zone) GetLiquidityModule() bool {
	if m != nil {
		return m.LiquidityModule
	}
	return false
}

func (m *Zone) GetWithdrawalWaitgroup() uint32 {
	if m != nil {
		return m.WithdrawalWaitgroup
	}
	return 0
}

func (m *Zone) GetIbcNextValidatorsHash() []byte {
	if m != nil {
		return m.IbcNextValidatorsHash
	}
	return nil
}

func (m *Zone) GetValidatorSelectionAllocation() uint64 {
	if m != nil {
		return m.ValidatorSelectionAllocation
	}
	return 0
}

func (m *Zone) GetHoldingsAllocation() uint64 {
	if m != nil {
		return m.HoldingsAllocation
	}
	return 0
}

func (m *Zone) GetLastEpochHeight() int64 {
	if m != nil {
		return m.LastEpochHeight
	}
	return 0
}

func (m *Zone) GetUnbondingPeriod() int64 {
	if m != nil {
		return m.UnbondingPeriod
	}
	return 0
}

func (m *Zone) GetMessagesPerTx() int64 {
	if m != nil {
		return m.MessagesPerTx
	}
	return 0
}

type ICAAccount struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// balance defines the different coins this balance holds.
	Balance           github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
	PortName          string                                   `protobuf:"bytes,3,opt,name=port_name,json=portName,proto3" json:"port_name,omitempty"`
	WithdrawalAddress string                                   `protobuf:"bytes,4,opt,name=withdrawal_address,json=withdrawalAddress,proto3" json:"withdrawal_address,omitempty"`
	BalanceWaitgroup  uint32                                   `protobuf:"varint,5,opt,name=balance_waitgroup,json=balanceWaitgroup,proto3" json:"balance_waitgroup,omitempty"`
}

func (m *ICAAccount) Reset()         { *m = ICAAccount{} }
func (m *ICAAccount) String() string { return proto.CompactTextString(m) }
func (*ICAAccount) ProtoMessage()    {}
func (*ICAAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{1}
}
func (m *ICAAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICAAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICAAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICAAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICAAccount.Merge(m, src)
}
func (m *ICAAccount) XXX_Size() int {
	return m.Size()
}
func (m *ICAAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ICAAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ICAAccount proto.InternalMessageInfo

func (m *ICAAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ICAAccount) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *ICAAccount) GetPortName() string {
	if m != nil {
		return m.PortName
	}
	return ""
}

func (m *ICAAccount) GetWithdrawalAddress() string {
	if m != nil {
		return m.WithdrawalAddress
	}
	return ""
}

func (m *ICAAccount) GetBalanceWaitgroup() uint32 {
	if m != nil {
		return m.BalanceWaitgroup
	}
	return 0
}

type Distribution struct {
	Valoper string `protobuf:"bytes,1,opt,name=valoper,proto3" json:"valoper,omitempty"`
	Amount  uint64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{2}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

func (m *Distribution) GetValoper() string {
	if m != nil {
		return m.Valoper
	}
	return ""
}

func (m *Distribution) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type WithdrawalRecord struct {
	ChainId        string                                   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Delegator      string                                   `protobuf:"bytes,2,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Distribution   []*Distribution                          `protobuf:"bytes,3,rep,name=distribution,proto3" json:"distribution,omitempty"`
	Recipient      string                                   `protobuf:"bytes,4,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	BurnAmount     github_com_cosmos_cosmos_sdk_types.Coin  `protobuf:"bytes,6,opt,name=burn_amount,json=burnAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"burn_amount"`
	Txhash         string                                   `protobuf:"bytes,7,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Status         int32                                    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	CompletionTime time.Time                                `protobuf:"bytes,9,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *WithdrawalRecord) Reset()         { *m = WithdrawalRecord{} }
func (m *WithdrawalRecord) String() string { return proto.CompactTextString(m) }
func (*WithdrawalRecord) ProtoMessage()    {}
func (*WithdrawalRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{3}
}
func (m *WithdrawalRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawalRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawalRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawalRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawalRecord.Merge(m, src)
}
func (m *WithdrawalRecord) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawalRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawalRecord.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawalRecord proto.InternalMessageInfo

func (m *WithdrawalRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *WithdrawalRecord) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *WithdrawalRecord) GetDistribution() []*Distribution {
	if m != nil {
		return m.Distribution
	}
	return nil
}

func (m *WithdrawalRecord) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *WithdrawalRecord) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *WithdrawalRecord) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *WithdrawalRecord) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *WithdrawalRecord) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type UnbondingRecord struct {
	ChainId       string   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EpochNumber   int64    `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Validator     string   `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
	RelatedTxhash []string `protobuf:"bytes,4,rep,name=related_txhash,json=relatedTxhash,proto3" json:"related_txhash,omitempty"`
}

func (m *UnbondingRecord) Reset()         { *m = UnbondingRecord{} }
func (m *UnbondingRecord) String() string { return proto.CompactTextString(m) }
func (*UnbondingRecord) ProtoMessage()    {}
func (*UnbondingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{4}
}
func (m *UnbondingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingRecord.Merge(m, src)
}
func (m *UnbondingRecord) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingRecord proto.InternalMessageInfo

func (m *UnbondingRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UnbondingRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *UnbondingRecord) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *UnbondingRecord) GetRelatedTxhash() []string {
	if m != nil {
		return m.RelatedTxhash
	}
	return nil
}

type RedelegationRecord struct {
	ChainId        string    `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EpochNumber    int64     `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	Source         string    `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Destination    string    `protobuf:"bytes,4,opt,name=destination,proto3" json:"destination,omitempty"`
	Amount         int64     `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty"`
	CompletionTime time.Time `protobuf:"bytes,6,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
}

func (m *RedelegationRecord) Reset()         { *m = RedelegationRecord{} }
func (m *RedelegationRecord) String() string { return proto.CompactTextString(m) }
func (*RedelegationRecord) ProtoMessage()    {}
func (*RedelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{5}
}
func (m *RedelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedelegationRecord.Merge(m, src)
}
func (m *RedelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *RedelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RedelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RedelegationRecord proto.InternalMessageInfo

func (m *RedelegationRecord) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *RedelegationRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *RedelegationRecord) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RedelegationRecord) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *RedelegationRecord) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *RedelegationRecord) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

type TransferRecord struct {
	Sender    string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Recipient string                                  `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
}

func (m *TransferRecord) Reset()         { *m = TransferRecord{} }
func (m *TransferRecord) String() string { return proto.CompactTextString(m) }
func (*TransferRecord) ProtoMessage()    {}
func (*TransferRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{6}
}
func (m *TransferRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TransferRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRecord.Merge(m, src)
}
func (m *TransferRecord) XXX_Size() int {
	return m.Size()
}
func (m *TransferRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRecord proto.InternalMessageInfo

func (m *TransferRecord) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *TransferRecord) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

type Validator struct {
	ValoperAddress  string                                 `protobuf:"bytes,1,opt,name=valoper_address,json=valoperAddress,proto3" json:"valoper_address,omitempty"`
	CommissionRate  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=commission_rate,json=commissionRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"commission_rate"`
	DelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares"`
	VotingPower     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=voting_power,json=votingPower,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"voting_power"`
	Score           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=score,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"score"`
	Status          string                                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	Jailed          bool                                   `protobuf:"varint,7,opt,name=jailed,proto3" json:"jailed,omitempty"`
	Tombstoned      bool                                   `protobuf:"varint,8,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	JailedSince     time.Time                              `protobuf:"bytes,9,opt,name=jailed_since,json=jailedSince,proto3,stdtime" json:"jailed_since"`
	// Number of shares self bonded from the validator
	ValidatorBondShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,10,opt,name=validator_bond_shares,json=validatorBondShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_bond_shares" yaml:"validator_bond_shares"`
	// Number of shares either tokenized or owned by a liquid staking provider
	LiquidShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=liquid_shares,json=liquidShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquid_shares" yaml:"liquid_shares"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{7}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetValoperAddress() string {
	if m != nil {
		return m.ValoperAddress
	}
	return ""
}

func (m *Validator) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Validator) GetJailed() bool {
	if m != nil {
		return m.Jailed
	}
	return false
}

func (m *Validator) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *Validator) GetJailedSince() time.Time {
	if m != nil {
		return m.JailedSince
	}
	return time.Time{}
}

type DelegatorIntent struct {
	Delegator string           `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	Intents   ValidatorIntents `protobuf:"bytes,2,rep,name=intents,proto3,castrepeated=ValidatorIntents" json:"intents,omitempty"`
}

func (m *DelegatorIntent) Reset()         { *m = DelegatorIntent{} }
func (m *DelegatorIntent) String() string { return proto.CompactTextString(m) }
func (*DelegatorIntent) ProtoMessage()    {}
func (*DelegatorIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{8}
}
func (m *DelegatorIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorIntent.Merge(m, src)
}
func (m *DelegatorIntent) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorIntent.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorIntent proto.InternalMessageInfo

func (m *DelegatorIntent) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *DelegatorIntent) GetIntents() ValidatorIntents {
	if m != nil {
		return m.Intents
	}
	return nil
}

type ValidatorIntent struct {
	ValoperAddress string                                 `protobuf:"bytes,1,opt,name=valoper_address,proto3" json:"valoper_address,omitempty"`
	Weight         github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *ValidatorIntent) Reset()         { *m = ValidatorIntent{} }
func (m *ValidatorIntent) String() string { return proto.CompactTextString(m) }
func (*ValidatorIntent) ProtoMessage()    {}
func (*ValidatorIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{9}
}
func (m *ValidatorIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorIntent.Merge(m, src)
}
func (m *ValidatorIntent) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorIntent.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorIntent proto.InternalMessageInfo

func (m *ValidatorIntent) GetValoperAddress() string {
	if m != nil {
		return m.ValoperAddress
	}
	return ""
}

type Delegation struct {
	DelegationAddress string                                  `protobuf:"bytes,1,opt,name=delegation_address,json=delegationAddress,proto3" json:"delegation_address,omitempty"`
	ValidatorAddress  string                                  `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount            github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	Height            int64                                   `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	RedelegationEnd   int64                                   `protobuf:"varint,5,opt,name=redelegation_end,json=redelegationEnd,proto3" json:"redelegation_end,omitempty"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{10}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

func (m *Delegation) GetDelegationAddress() string {
	if m != nil {
		return m.DelegationAddress
	}
	return ""
}

func (m *Delegation) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *Delegation) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Delegation) GetRedelegationEnd() int64 {
	if m != nil {
		return m.RedelegationEnd
	}
	return 0
}

type PortConnectionTuple struct {
	ConnectionId string `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	PortId       string `protobuf:"bytes,2,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
}

func (m *PortConnectionTuple) Reset()         { *m = PortConnectionTuple{} }
func (m *PortConnectionTuple) String() string { return proto.CompactTextString(m) }
func (*PortConnectionTuple) ProtoMessage()    {}
func (*PortConnectionTuple) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{11}
}
func (m *PortConnectionTuple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PortConnectionTuple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PortConnectionTuple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PortConnectionTuple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortConnectionTuple.Merge(m, src)
}
func (m *PortConnectionTuple) XXX_Size() int {
	return m.Size()
}
func (m *PortConnectionTuple) XXX_DiscardUnknown() {
	xxx_messageInfo_PortConnectionTuple.DiscardUnknown(m)
}

var xxx_messageInfo_PortConnectionTuple proto.InternalMessageInfo

func (m *PortConnectionTuple) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *PortConnectionTuple) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

type Receipt struct {
	ChainId   string                                   `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Sender    string                                   `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Txhash    string                                   `protobuf:"bytes,3,opt,name=txhash,proto3" json:"txhash,omitempty"`
	Amount    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	FirstSeen *time.Time                               `protobuf:"bytes,5,opt,name=first_seen,json=firstSeen,proto3,stdtime" json:"first_seen,omitempty"`
	Completed *time.Time                               `protobuf:"bytes,6,opt,name=completed,proto3,stdtime" json:"completed,omitempty"`
}

func (m *Receipt) Reset()         { *m = Receipt{} }
func (m *Receipt) String() string { return proto.CompactTextString(m) }
func (*Receipt) ProtoMessage()    {}
func (*Receipt) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d755cfd37ef9fee, []int{12}
}
func (m *Receipt) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receipt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Receipt.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Receipt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receipt.Merge(m, src)
}
func (m *Receipt) XXX_Size() int {
	return m.Size()
}
func (m *Receipt) XXX_DiscardUnknown() {
	xxx_messageInfo_Receipt.DiscardUnknown(m)
}

var xxx_messageInfo_Receipt proto.InternalMessageInfo

func (m *Receipt) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Receipt) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Receipt) GetTxhash() string {
	if m != nil {
		return m.Txhash
	}
	return ""
}

func (m *Receipt) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Receipt) GetFirstSeen() *time.Time {
	if m != nil {
		return m.FirstSeen
	}
	return nil
}

func (m *Receipt) GetCompleted() *time.Time {
	if m != nil {
		return m.Completed
	}
	return nil
}

func init() {
	proto.RegisterType((*Zone)(nil), "quicksilver.interchainstaking.v1.Zone")
	proto.RegisterType((*ICAAccount)(nil), "quicksilver.interchainstaking.v1.ICAAccount")
	proto.RegisterType((*Distribution)(nil), "quicksilver.interchainstaking.v1.Distribution")
	proto.RegisterType((*WithdrawalRecord)(nil), "quicksilver.interchainstaking.v1.WithdrawalRecord")
	proto.RegisterType((*UnbondingRecord)(nil), "quicksilver.interchainstaking.v1.UnbondingRecord")
	proto.RegisterType((*RedelegationRecord)(nil), "quicksilver.interchainstaking.v1.RedelegationRecord")
	proto.RegisterType((*TransferRecord)(nil), "quicksilver.interchainstaking.v1.TransferRecord")
	proto.RegisterType((*Validator)(nil), "quicksilver.interchainstaking.v1.Validator")
	proto.RegisterType((*DelegatorIntent)(nil), "quicksilver.interchainstaking.v1.DelegatorIntent")
	proto.RegisterType((*ValidatorIntent)(nil), "quicksilver.interchainstaking.v1.ValidatorIntent")
	proto.RegisterType((*Delegation)(nil), "quicksilver.interchainstaking.v1.Delegation")
	proto.RegisterType((*PortConnectionTuple)(nil), "quicksilver.interchainstaking.v1.PortConnectionTuple")
	proto.RegisterType((*Receipt)(nil), "quicksilver.interchainstaking.v1.Receipt")
}

func init() {
	proto.RegisterFile("quicksilver/interchainstaking/v1/interchainstaking.proto", fileDescriptor_0d755cfd37ef9fee)
}

var fileDescriptor_0d755cfd37ef9fee = []byte{
	// 1747 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5f, 0x6f, 0x1b, 0xc7,
	0x11, 0xf7, 0x91, 0x14, 0x25, 0x0e, 0x29, 0x51, 0x5a, 0xc9, 0xce, 0xd9, 0x4d, 0x29, 0x96, 0x45,
	0x53, 0xb6, 0xa9, 0xc8, 0xc8, 0x05, 0xda, 0x22, 0x28, 0x8a, 0x88, 0x96, 0x9b, 0x08, 0x85, 0x05,
	0xe1, 0xa4, 0x34, 0x80, 0x8b, 0xe2, 0xb0, 0xbc, 0x5b, 0x91, 0x5b, 0xdf, 0xed, 0xd2, 0xb7, 0x7b,
	0x92, 0xdc, 0xc7, 0x7e, 0x82, 0x7c, 0x84, 0xbe, 0x15, 0x08, 0x8a, 0x02, 0x05, 0xfc, 0xd8, 0x0f,
	0x90, 0xc7, 0xd4, 0x4f, 0x45, 0x51, 0xd8, 0x85, 0xfd, 0xdc, 0x97, 0x7e, 0x82, 0x62, 0xff, 0xdc,
	0xf1, 0xa4, 0xa8, 0xa2, 0x64, 0xcb, 0x79, 0x22, 0x77, 0x76, 0xe6, 0x37, 0xb3, 0xbb, 0xb3, 0xbf,
	0x99, 0x3d, 0xf8, 0xd9, 0xe3, 0x94, 0x06, 0x8f, 0x04, 0x8d, 0x8e, 0x48, 0xd2, 0xa7, 0x4c, 0x92,
	0x24, 0x18, 0x63, 0xca, 0x84, 0xc4, 0x8f, 0x28, 0x1b, 0xf5, 0x8f, 0x36, 0xbf, 0x2e, 0xec, 0x4d,
	0x12, 0x2e, 0x39, 0x6a, 0x17, 0x2c, 0x7b, 0x5f, 0x57, 0x3a, 0xda, 0xbc, 0xb3, 0x36, 0xe2, 0x23,
	0xae, 0x95, 0xfb, 0xea, 0x9f, 0xb1, 0xbb, 0x73, 0x3b, 0xe0, 0x22, 0xe6, 0xc2, 0x37, 0x13, 0x66,
	0x60, 0xa7, 0x5a, 0x66, 0xd4, 0x1f, 0x62, 0x41, 0xfa, 0x47, 0x9b, 0x43, 0x22, 0xf1, 0x66, 0x3f,
	0xe0, 0x94, 0xd9, 0xf9, 0xf5, 0x11, 0xe7, 0xa3, 0x88, 0xf4, 0xf5, 0x68, 0x98, 0x1e, 0xf6, 0x25,
	0x8d, 0x89, 0x90, 0x38, 0x9e, 0x18, 0x85, 0xce, 0x5f, 0xeb, 0x50, 0x79, 0xc8, 0x19, 0x41, 0xdf,
	0x85, 0xc5, 0x80, 0x33, 0x46, 0x02, 0x49, 0x39, 0xf3, 0x69, 0xe8, 0x3a, 0x6d, 0xa7, 0x5b, 0xf3,
	0x1a, 0x53, 0xe1, 0x4e, 0x88, 0x6e, 0xc3, 0x82, 0x0e, 0x59, 0xcd, 0x97, 0xf4, 0xfc, 0xbc, 0x1e,
	0xef, 0x84, 0xe8, 0x53, 0x68, 0x86, 0x64, 0xc2, 0x05, 0x95, 0x3e, 0x0e, 0xc3, 0x84, 0x08, 0xe1,
	0x96, 0xdb, 0x4e, 0xb7, 0x7e, 0xf7, 0x47, 0xbd, 0x59, 0xcb, 0xee, 0xed, 0xdc, 0xdb, 0xda, 0x0a,
	0x02, 0x9e, 0x32, 0xe9, 0x2d, 0x59, 0x90, 0x2d, 0x83, 0x81, 0x7e, 0x03, 0xe8, 0x98, 0xca, 0x71,
	0x98, 0xe0, 0x63, 0x1c, 0xe5, 0xc8, 0x95, 0xd7, 0x40, 0x5e, 0x99, 0xe2, 0x64, 0xe0, 0xbf, 0x85,
	0xd5, 0x09, 0x49, 0x0e, 0x79, 0x12, 0x63, 0x16, 0x90, 0x1c, 0x7d, 0xee, 0x35, 0xd0, 0x51, 0x01,
	0xa8, 0x10, 0x7b, 0x48, 0x22, 0x32, 0xc2, 0x7a, 0x4b, 0x33, 0xf4, 0xea, 0xeb, 0xc4, 0x3e, 0xc5,
	0xc9, 0xc0, 0xbf, 0x07, 0x4b, 0xd8, 0xcc, 0xfa, 0x93, 0x84, 0x1c, 0xd2, 0x13, 0x77, 0x5e, 0x1f,
	0xc8, 0xa2, 0x95, 0xee, 0x69, 0x21, 0x5a, 0x87, 0x7a, 0xc4, 0x03, 0x1c, 0xf9, 0x21, 0x61, 0x3c,
	0x76, 0x17, 0xb4, 0x0e, 0x68, 0xd1, 0xb6, 0x92, 0xa0, 0x6f, 0x03, 0xa8, 0xe4, 0xb1, 0xf3, 0x35,
	0x3d, 0x5f, 0x53, 0x12, 0x33, 0x4d, 0xa0, 0x99, 0x90, 0x90, 0xc4, 0x13, 0xbd, 0x86, 0x04, 0x4b,
	0xe2, 0x82, 0xd2, 0x19, 0xfc, 0xfc, 0xcb, 0xe7, 0xeb, 0x37, 0xfe, 0xf9, 0x7c, 0xfd, 0xbd, 0x11,
	0x95, 0xe3, 0x74, 0xd8, 0x0b, 0x78, 0x6c, 0x53, 0xd3, 0xfe, 0x6c, 0x88, 0xf0, 0x51, 0x5f, 0x3e,
	0x99, 0x10, 0xd1, 0xdb, 0x26, 0xc1, 0xb3, 0xa7, 0x1b, 0x60, 0x33, 0x77, 0x9b, 0x04, 0xde, 0xd2,
	0x14, 0xd4, 0xc3, 0x92, 0x20, 0x06, 0x6b, 0x11, 0x16, 0xd2, 0x3f, 0xeb, 0xab, 0x7e, 0x0d, 0xbe,
	0x90, 0x42, 0xf6, 0x4e, 0xfb, 0xfb, 0x15, 0xc0, 0x11, 0x8e, 0x68, 0x88, 0x25, 0x4f, 0x84, 0xdb,
	0x68, 0x97, 0xbb, 0xf5, 0xbb, 0xef, 0xcf, 0x3e, 0x92, 0x5f, 0x67, 0x36, 0x5e, 0xc1, 0x1c, 0x25,
	0xb0, 0x8c, 0x47, 0xa3, 0x44, 0x1d, 0x10, 0xf1, 0x95, 0x1d, 0x93, 0xee, 0xa2, 0x86, 0xdc, 0xbc,
	0x02, 0xe4, 0x8e, 0x36, 0x1c, 0xac, 0x7d, 0xf1, 0x62, 0x7d, 0xf9, 0x8c, 0x50, 0x78, 0xcd, 0xdc,
	0x81, 0x91, 0xa8, 0x63, 0x8b, 0xd3, 0x48, 0x52, 0x5f, 0x10, 0x16, 0xba, 0x4b, 0x6d, 0xa7, 0xbb,
	0xe0, 0xd5, 0xb4, 0x64, 0x9f, 0xb0, 0x10, 0xfd, 0x00, 0x96, 0x23, 0xfa, 0x38, 0xa5, 0x21, 0x95,
	0x4f, 0xfc, 0x98, 0x87, 0x69, 0x44, 0xdc, 0xa6, 0x56, 0x6a, 0xe6, 0xf2, 0x07, 0x5a, 0x8c, 0x36,
	0x61, 0xad, 0x70, 0xc3, 0x8e, 0x31, 0x95, 0xa3, 0x84, 0xa7, 0x13, 0x77, 0xb9, 0xed, 0x74, 0x17,
	0xbd, 0xd5, 0xe9, 0xdc, 0x67, 0xd9, 0x14, 0xfa, 0x29, 0xb8, 0x74, 0x18, 0xf8, 0x8c, 0x9c, 0x48,
	0x7f, 0xba, 0x0f, 0xfe, 0x18, 0x8b, 0xb1, 0xbb, 0xd2, 0x76, 0xba, 0x0d, 0xef, 0x26, 0x1d, 0x06,
	0xbb, 0xe4, 0x44, 0xe6, 0x0b, 0x11, 0x9f, 0x60, 0x31, 0x46, 0xdb, 0xd0, 0xca, 0xf5, 0x7d, 0x41,
	0x22, 0xcb, 0x36, 0x38, 0x52, 0x09, 0xa9, 0xfe, 0xba, 0xa8, 0xed, 0x74, 0x2b, 0xde, 0xbb, 0xb9,
	0xd6, 0x7e, 0xa6, 0xb4, 0x95, 0xeb, 0xa0, 0x3e, 0xac, 0x8e, 0x79, 0x14, 0x52, 0x36, 0x12, 0x45,
	0xd3, 0x55, 0x6d, 0x8a, 0xb2, 0xa9, 0x82, 0xc1, 0x0f, 0x61, 0x45, 0x67, 0x17, 0x99, 0xf0, 0x60,
	0xec, 0x8f, 0x09, 0x1d, 0x8d, 0xa5, 0xbb, 0xd6, 0x76, 0xba, 0x65, 0xaf, 0xa9, 0x26, 0xee, 0x2b,
	0xf9, 0x27, 0x5a, 0x8c, 0x76, 0xa1, 0x2c, 0x8f, 0x22, 0xf7, 0xe6, 0x35, 0x24, 0x9e, 0x02, 0x52,
	0x27, 0x91, 0xb2, 0x21, 0x67, 0x2a, 0x26, 0x7f, 0x42, 0x12, 0xca, 0x43, 0xf7, 0x96, 0x71, 0x9d,
	0xcb, 0xf7, 0xb4, 0x18, 0xbd, 0x07, 0xcd, 0x98, 0x08, 0x81, 0x47, 0x44, 0x28, 0x4d, 0x5f, 0x9e,
	0xb8, 0xef, 0x68, 0xcd, 0xc5, 0x4c, 0xbc, 0x47, 0x92, 0x83, 0x93, 0xce, 0x1f, 0x4b, 0x00, 0x53,
	0x72, 0x40, 0x77, 0x61, 0x3e, 0xe3, 0x16, 0xcd, 0xd9, 0x03, 0xf7, 0xd9, 0xd3, 0x8d, 0x35, 0x1b,
	0x87, 0xa5, 0x8b, 0x7d, 0x99, 0x50, 0x36, 0xf2, 0x32, 0x45, 0x44, 0x60, 0x7e, 0x88, 0x23, 0x45,
	0x56, 0x6e, 0x49, 0x67, 0xea, 0xed, 0x9e, 0x35, 0x50, 0x57, 0xbf, 0x67, 0x2b, 0x49, 0xef, 0x1e,
	0xa7, 0x6c, 0xf0, 0x81, 0xda, 0x84, 0x2f, 0x5e, 0xac, 0x77, 0x2f, 0xb1, 0x09, 0xca, 0x40, 0x78,
	0x19, 0x36, 0xfa, 0x16, 0xd4, 0x26, 0x3c, 0x91, 0x3e, 0xc3, 0x31, 0xd1, 0xe5, 0xa0, 0xe6, 0x2d,
	0x28, 0xc1, 0x2e, 0x8e, 0x09, 0xda, 0xf8, 0xbf, 0xd4, 0x5e, 0x3b, 0x8f, 0xac, 0xdf, 0x87, 0x15,
	0x0b, 0x5b, 0x48, 0xd2, 0x39, 0x9d, 0xa4, 0xcb, 0x76, 0x22, 0xcf, 0xd0, 0xce, 0x47, 0xd0, 0xd8,
	0xa6, 0x42, 0x26, 0x74, 0x98, 0xea, 0x0c, 0x70, 0x61, 0xfe, 0x08, 0x47, 0x7c, 0x42, 0x12, 0x5b,
	0xd7, 0xb2, 0x21, 0xba, 0x05, 0x55, 0x1c, 0xab, 0x7d, 0xd4, 0x05, 0xad, 0xe2, 0xd9, 0x51, 0xe7,
	0xef, 0x15, 0x58, 0xfe, 0x2c, 0x0f, 0xc2, 0x23, 0x01, 0x4f, 0x4e, 0xd7, 0x3f, 0xe7, 0x74, 0xfd,
	0xfb, 0x09, 0xd4, 0x2c, 0x49, 0xf3, 0xc4, 0xd4, 0xc6, 0x0b, 0xce, 0x61, 0xaa, 0x8a, 0x3c, 0x68,
	0x84, 0x85, 0x48, 0xdd, 0xb2, 0x3e, 0x8e, 0xde, 0x6c, 0xe2, 0x28, 0xae, 0xcf, 0x3b, 0x85, 0xa1,
	0x62, 0x49, 0x48, 0x40, 0x27, 0x54, 0x31, 0x51, 0x65, 0x56, 0x2c, 0xb9, 0x2a, 0x0a, 0xf2, 0xbd,
	0x98, 0xbb, 0xfe, 0xa4, 0xb0, 0xd0, 0xe8, 0xf7, 0x50, 0x1f, 0xa6, 0x09, 0xf3, 0xad, 0x27, 0x53,
	0x0e, 0x2f, 0xf0, 0xf4, 0x0b, 0x7b, 0x07, 0xbf, 0x7f, 0x49, 0x4f, 0xcf, 0x9e, 0x6e, 0xd4, 0x2d,
	0x98, 0x1a, 0x7a, 0xa0, 0xbc, 0x6d, 0x19, 0xdf, 0xb7, 0xa0, 0x2a, 0x4f, 0x34, 0x4d, 0x99, 0x62,
	0x69, 0x47, 0x4a, 0x2e, 0x24, 0x96, 0xa9, 0xd0, 0x05, 0x72, 0xce, 0xb3, 0x23, 0xf4, 0x00, 0x9a,
	0x01, 0x8f, 0x27, 0x11, 0xd1, 0x34, 0xa5, 0x7a, 0x27, 0x5d, 0x21, 0xeb, 0x77, 0xef, 0xf4, 0x4c,
	0x63, 0xd5, 0xcb, 0x1a, 0xab, 0xde, 0x41, 0xd6, 0x58, 0x0d, 0x16, 0x54, 0xc0, 0x9f, 0xbf, 0x58,
	0x77, 0xbc, 0xa5, 0xa9, 0xb1, 0x9a, 0xee, 0xfc, 0xc5, 0x81, 0xe6, 0xa7, 0xd9, 0xa5, 0x9f, 0x9d,
	0x52, 0xdf, 0x81, 0x86, 0x61, 0x2c, 0x96, 0xc6, 0x43, 0x62, 0xb2, 0xaa, 0xec, 0xd5, 0xb5, 0x6c,
	0x57, 0x8b, 0xd4, 0x49, 0xe7, 0x54, 0x69, 0x2e, 0xd8, 0x45, 0x27, 0x9d, 0xab, 0xaa, 0xee, 0x21,
	0x21, 0x11, 0x96, 0x24, 0xf4, 0xed, 0x86, 0x54, 0xda, 0x65, 0xd5, 0x3d, 0x58, 0xe9, 0x81, 0x16,
	0x76, 0xfe, 0x54, 0x02, 0xa4, 0x2a, 0x67, 0xd6, 0x7c, 0x5c, 0x4b, 0xcc, 0x1f, 0x40, 0x55, 0xf0,
	0x34, 0x09, 0xc8, 0xcc, 0x80, 0xad, 0x1e, 0xfa, 0x10, 0xea, 0x21, 0x11, 0x92, 0x32, 0x43, 0xf4,
	0xb3, 0x32, 0xba, 0xa8, 0x5c, 0xb8, 0xdf, 0x73, 0x3a, 0x94, 0x2c, 0x0d, 0xcf, 0x39, 0xda, 0xea,
	0x1b, 0x1c, 0xed, 0x7f, 0x1c, 0x58, 0x3a, 0x48, 0x30, 0x13, 0x87, 0x24, 0xb1, 0xbb, 0xa4, 0xd6,
	0x49, 0x58, 0x98, 0x51, 0xce, 0x85, 0xeb, 0xd4, 0x7a, 0xa7, 0xef, 0x6d, 0xe9, 0xf2, 0xf7, 0xf6,
	0x71, 0xbe, 0xc6, 0xf2, 0xdb, 0xbe, 0x4d, 0x19, 0x3d, 0x3e, 0xaf, 0x42, 0x2d, 0x2f, 0xee, 0x68,
	0x0b, 0x9a, 0x96, 0x4f, 0xfd, 0xcb, 0x96, 0xa2, 0x25, 0x6b, 0xb0, 0x95, 0x57, 0x24, 0x75, 0x1e,
	0x31, 0x15, 0x22, 0x6f, 0xfe, 0x4a, 0xd7, 0xd1, 0x68, 0x4e, 0x41, 0x75, 0xe3, 0x37, 0x82, 0xe5,
	0x9c, 0x7b, 0x7d, 0x31, 0xc6, 0x09, 0x11, 0x36, 0x0d, 0xdf, 0xcc, 0x4f, 0x33, 0x47, 0xdd, 0xd7,
	0xa0, 0xc8, 0x87, 0xc6, 0x11, 0x97, 0xba, 0xe8, 0xf3, 0x63, 0x92, 0xd8, 0xa4, 0xbd, 0x8a, 0x93,
	0x1d, 0x26, 0x0b, 0x4e, 0x76, 0x98, 0xf4, 0xea, 0x06, 0x71, 0x4f, 0x01, 0x22, 0x0f, 0xe6, 0x44,
	0xc0, 0x13, 0xa2, 0xf3, 0xfa, 0x4d, 0xc3, 0x37, 0x50, 0x05, 0x1e, 0xac, 0x1a, 0x7e, 0xb4, 0x3c,
	0x78, 0x0b, 0xaa, 0xbf, 0xc3, 0x34, 0x22, 0xa1, 0xe6, 0xcd, 0x05, 0xcf, 0x8e, 0x50, 0x0b, 0x40,
	0xf2, 0x78, 0x28, 0x24, 0x67, 0x24, 0xd4, 0xdc, 0xb9, 0xe0, 0x15, 0x24, 0xe8, 0x63, 0x68, 0x18,
	0x4d, 0x5f, 0x50, 0xd5, 0x6b, 0x5c, 0x85, 0x3c, 0xeb, 0xc6, 0x72, 0x5f, 0x19, 0xa2, 0x3f, 0x38,
	0x70, 0x73, 0xda, 0x39, 0x2a, 0x06, 0xcd, 0x0e, 0xcf, 0xbc, 0x46, 0x76, 0xaf, 0xb6, 0xfa, 0xff,
	0x3e, 0x5f, 0x7f, 0xf7, 0x09, 0x8e, 0xa3, 0x0f, 0x3b, 0xe7, 0x82, 0x76, 0xbc, 0xd5, 0x5c, 0x3e,
	0xe0, 0x2c, 0xb4, 0x47, 0xfa, 0x08, 0x16, 0x4d, 0xf3, 0x9c, 0xf9, 0x36, 0xaf, 0x93, 0x5f, 0x5e,
	0xd9, 0xf7, 0x9a, 0xf1, 0x7d, 0x0a, 0xac, 0xe3, 0x35, 0xcc, 0xd8, 0x38, 0xeb, 0xfc, 0xd9, 0x81,
	0xe6, 0x76, 0x96, 0x53, 0xb6, 0xe9, 0x3f, 0xd5, 0x63, 0x38, 0x97, 0xef, 0x31, 0x30, 0xcc, 0x9b,
	0x67, 0x89, 0xb0, 0xdd, 0xde, 0xb5, 0xbd, 0x4b, 0x32, 0xdc, 0xce, 0xdf, 0x1c, 0x68, 0x9e, 0x99,
	0x45, 0x83, 0xab, 0xb3, 0xc2, 0x59, 0x03, 0x44, 0xa0, 0x7a, 0x6c, 0xfa, 0x75, 0xc3, 0x06, 0x0f,
	0xae, 0xbc, 0xd9, 0x8b, 0x66, 0xb3, 0x0d, 0x4a, 0xe7, 0x4c, 0xde, 0x57, 0x33, 0x71, 0x09, 0x60,
	0x3b, 0x2f, 0x73, 0xe8, 0xe3, 0x73, 0x5f, 0xee, 0xb3, 0x82, 0x3f, 0xe7, 0x95, 0x7e, 0x1f, 0x56,
	0xa6, 0x19, 0x96, 0xe1, 0xcc, 0x62, 0xf6, 0xe5, 0xdc, 0x24, 0x83, 0xf9, 0xe6, 0x09, 0x5e, 0x5d,
	0x79, 0xfb, 0x50, 0xaa, 0x98, 0xba, 0x69, 0x46, 0xea, 0x3d, 0x93, 0x14, 0x3a, 0x02, 0x5f, 0x3d,
	0x3f, 0x4d, 0x65, 0x6d, 0x16, 0xe5, 0xf7, 0x59, 0xd8, 0xd9, 0x87, 0xd5, 0x3d, 0x9e, 0xc8, 0x7b,
	0xf9, 0x17, 0xa4, 0x83, 0x74, 0x12, 0x5d, 0xf2, 0x4b, 0xd3, 0x3b, 0x30, 0xaf, 0x5f, 0x0e, 0xf9,
	0x87, 0xa6, 0xaa, 0x1a, 0xee, 0x84, 0x9d, 0x7f, 0x95, 0x60, 0xde, 0x23, 0x01, 0xa1, 0x13, 0x79,
	0x51, 0x1f, 0x32, 0x2d, 0xbe, 0xa5, 0x4b, 0x16, 0xdf, 0x69, 0x6f, 0x58, 0x3e, 0xd5, 0x1b, 0x4e,
	0x9b, 0xe2, 0xca, 0xdb, 0x6b, 0x8a, 0xef, 0x01, 0x1c, 0xd2, 0x44, 0x48, 0x5f, 0x10, 0xc2, 0xec,
	0x07, 0xa8, 0x59, 0x34, 0xe9, 0x68, 0x9a, 0xac, 0x69, 0xbb, 0x7d, 0x42, 0x18, 0x1a, 0x40, 0xcd,
	0x76, 0x25, 0x24, 0xbc, 0x64, 0x33, 0x63, 0x31, 0x72, 0xb3, 0xc1, 0xc3, 0x2f, 0x5f, 0xb6, 0x9c,
	0xaf, 0x5e, 0xb6, 0x9c, 0x7f, 0xbf, 0x6c, 0x39, 0x9f, 0xbf, 0x6a, 0xdd, 0xf8, 0xea, 0x55, 0xeb,
	0xc6, 0x3f, 0x5e, 0xb5, 0x6e, 0x3c, 0xfc, 0xa8, 0xb0, 0x28, 0xca, 0x46, 0x84, 0xa5, 0x54, 0x3e,
	0xd9, 0x18, 0xa6, 0x34, 0x0a, 0xfb, 0xc5, 0x4f, 0xa2, 0x27, 0xe7, 0x7c, 0x14, 0xd5, 0x4b, 0x1e,
	0x56, 0x75, 0x10, 0x3f, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x65, 0x9c, 0x3b, 0xaf, 0x42,
	0x15, 0x00, 0x00,
}

func (m *Zone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Zone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Zone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessagesPerTx != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.MessagesPerTx))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.UnbondingPeriod != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.UnbondingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.Tvl.Size()
		i -= size
		if _, err := m.Tvl.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.LastEpochHeight != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.LastEpochHeight))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.HoldingsAllocation != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.HoldingsAllocation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.ValidatorSelectionAllocation != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.ValidatorSelectionAllocation))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.IbcNextValidatorsHash) > 0 {
		i -= len(m.IbcNextValidatorsHash)
		copy(dAtA[i:], m.IbcNextValidatorsHash)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.IbcNextValidatorsHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.WithdrawalWaitgroup != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.WithdrawalWaitgroup))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.LiquidityModule {
		i--
		if m.LiquidityModule {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.MultiSend {
		i--
		if m.MultiSend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if len(m.AggregateIntent) > 0 {
		for iNdEx := len(m.AggregateIntent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AggregateIntent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	{
		size := m.LastRedemptionRate.Size()
		i -= size
		if _, err := m.LastRedemptionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.RedemptionRate.Size()
		i -= size
		if _, err := m.RedemptionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.LocalDenom) > 0 {
		i -= len(m.LocalDenom)
		copy(dAtA[i:], m.LocalDenom)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.LocalDenom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AccountPrefix) > 0 {
		i -= len(m.AccountPrefix)
		copy(dAtA[i:], m.AccountPrefix)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.AccountPrefix)))
		i--
		dAtA[i] = 0x3a
	}
	if m.DelegationAddress != nil {
		{
			size, err := m.DelegationAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.PerformanceAddress != nil {
		{
			size, err := m.PerformanceAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.WithdrawalAddress != nil {
		{
			size, err := m.WithdrawalAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DepositAddress != nil {
		{
			size, err := m.DepositAddress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ICAAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICAAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICAAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BalanceWaitgroup != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.BalanceWaitgroup))
		i--
		dAtA[i] = 0x28
	}
	if len(m.WithdrawalAddress) > 0 {
		i -= len(m.WithdrawalAddress)
		copy(dAtA[i:], m.WithdrawalAddress)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.WithdrawalAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PortName) > 0 {
		i -= len(m.PortName)
		copy(dAtA[i:], m.PortName)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.PortName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Valoper) > 0 {
		i -= len(m.Valoper)
		copy(dAtA[i:], m.Valoper)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Valoper)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WithdrawalRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawalRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawalRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintInterchainstaking(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x4a
	if m.Status != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Distribution) > 0 {
		for iNdEx := len(m.Distribution) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distribution[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RelatedTxhash) > 0 {
		for iNdEx := len(m.RelatedTxhash) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RelatedTxhash[iNdEx])
			copy(dAtA[i:], m.RelatedTxhash[iNdEx])
			i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.RelatedTxhash[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RedelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintInterchainstaking(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x32
	if m.Amount != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransferRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TransferRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidShares.Size()
		i -= size
		if _, err := m.LiquidShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.ValidatorBondShares.Size()
		i -= size
		if _, err := m.ValidatorBondShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n9, err9 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.JailedSince, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.JailedSince):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintInterchainstaking(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x4a
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.Score.Size()
		i -= size
		if _, err := m.Score.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.VotingPower.Size()
		i -= size
		if _, err := m.VotingPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValoperAddress) > 0 {
		i -= len(m.ValoperAddress)
		copy(dAtA[i:], m.ValoperAddress)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ValoperAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Intents) > 0 {
		for iNdEx := len(m.Intents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Intents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValoperAddress) > 0 {
		i -= len(m.ValoperAddress)
		copy(dAtA[i:], m.ValoperAddress)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ValoperAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RedelegationEnd != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.RedelegationEnd))
		i--
		dAtA[i] = 0x28
	}
	if m.Height != 0 {
		i = encodeVarintInterchainstaking(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegationAddress) > 0 {
		i -= len(m.DelegationAddress)
		copy(dAtA[i:], m.DelegationAddress)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.DelegationAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PortConnectionTuple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PortConnectionTuple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PortConnectionTuple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Receipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receipt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receipt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Completed != nil {
		n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.Completed, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.Completed):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintInterchainstaking(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x32
	}
	if m.FirstSeen != nil {
		n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.FirstSeen, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeen):])
		if err12 != nil {
			return 0, err12
		}
		i -= n12
		i = encodeVarintInterchainstaking(dAtA, i, uint64(n12))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintInterchainstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Txhash) > 0 {
		i -= len(m.Txhash)
		copy(dAtA[i:], m.Txhash)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Txhash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintInterchainstaking(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterchainstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterchainstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Zone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.DepositAddress != nil {
		l = m.DepositAddress.Size()
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.WithdrawalAddress != nil {
		l = m.WithdrawalAddress.Size()
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.PerformanceAddress != nil {
		l = m.PerformanceAddress.Size()
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.DelegationAddress != nil {
		l = m.DelegationAddress.Size()
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.AccountPrefix)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.LocalDenom)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = m.RedemptionRate.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.LastRedemptionRate.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	if len(m.AggregateIntent) > 0 {
		for _, e := range m.AggregateIntent {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	if m.MultiSend {
		n += 2
	}
	if m.LiquidityModule {
		n += 2
	}
	if m.WithdrawalWaitgroup != 0 {
		n += 2 + sovInterchainstaking(uint64(m.WithdrawalWaitgroup))
	}
	l = len(m.IbcNextValidatorsHash)
	if l > 0 {
		n += 2 + l + sovInterchainstaking(uint64(l))
	}
	if m.ValidatorSelectionAllocation != 0 {
		n += 2 + sovInterchainstaking(uint64(m.ValidatorSelectionAllocation))
	}
	if m.HoldingsAllocation != 0 {
		n += 2 + sovInterchainstaking(uint64(m.HoldingsAllocation))
	}
	if m.LastEpochHeight != 0 {
		n += 2 + sovInterchainstaking(uint64(m.LastEpochHeight))
	}
	l = m.Tvl.Size()
	n += 2 + l + sovInterchainstaking(uint64(l))
	if m.UnbondingPeriod != 0 {
		n += 2 + sovInterchainstaking(uint64(m.UnbondingPeriod))
	}
	if m.MessagesPerTx != 0 {
		n += 2 + sovInterchainstaking(uint64(m.MessagesPerTx))
	}
	return n
}

func (m *ICAAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	l = len(m.PortName)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.WithdrawalAddress)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.BalanceWaitgroup != 0 {
		n += 1 + sovInterchainstaking(uint64(m.BalanceWaitgroup))
	}
	return n
}

func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Valoper)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovInterchainstaking(uint64(m.Amount))
	}
	return n
}

func (m *WithdrawalRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.Distribution) > 0 {
		for _, e := range m.Distribution {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	l = m.BurnAmount.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovInterchainstaking(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovInterchainstaking(uint64(l))
	return n
}

func (m *UnbondingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovInterchainstaking(uint64(m.EpochNumber))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.RelatedTxhash) > 0 {
		for _, s := range m.RelatedTxhash {
			l = len(s)
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	return n
}

func (m *RedelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovInterchainstaking(uint64(m.EpochNumber))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovInterchainstaking(uint64(m.Amount))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovInterchainstaking(uint64(l))
	return n
}

func (m *TransferRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValoperAddress)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = m.CommissionRate.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.VotingPower.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.Score.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Tombstoned {
		n += 2
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.JailedSince)
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.ValidatorBondShares.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	l = m.LiquidShares.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	return n
}

func (m *DelegatorIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.Intents) > 0 {
		for _, e := range m.Intents {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	return n
}

func (m *ValidatorIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValoperAddress)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	return n
}

func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegationAddress)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovInterchainstaking(uint64(l))
	if m.Height != 0 {
		n += 1 + sovInterchainstaking(uint64(m.Height))
	}
	if m.RedelegationEnd != 0 {
		n += 1 + sovInterchainstaking(uint64(m.RedelegationEnd))
	}
	return n
}

func (m *PortConnectionTuple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	return n
}

func (m *Receipt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	l = len(m.Txhash)
	if l > 0 {
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovInterchainstaking(uint64(l))
		}
	}
	if m.FirstSeen != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.FirstSeen)
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	if m.Completed != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.Completed)
		n += 1 + l + sovInterchainstaking(uint64(l))
	}
	return n
}

func sovInterchainstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterchainstaking(x uint64) (n int) {
	return sovInterchainstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Zone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Zone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Zone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DepositAddress == nil {
				m.DepositAddress = &ICAAccount{}
			}
			if err := m.DepositAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WithdrawalAddress == nil {
				m.WithdrawalAddress = &ICAAccount{}
			}
			if err := m.WithdrawalAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformanceAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PerformanceAddress == nil {
				m.PerformanceAddress = &ICAAccount{}
			}
			if err := m.PerformanceAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAddress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationAddress == nil {
				m.DelegationAddress = &ICAAccount{}
			}
			if err := m.DelegationAddress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedemptionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRedemptionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastRedemptionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateIntent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregateIntent = append(m.AggregateIntent, &ValidatorIntent{})
			if err := m.AggregateIntent[len(m.AggregateIntent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiSend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MultiSend = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityModule", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LiquidityModule = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalWaitgroup", wireType)
			}
			m.WithdrawalWaitgroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawalWaitgroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcNextValidatorsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcNextValidatorsHash = append(m.IbcNextValidatorsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.IbcNextValidatorsHash == nil {
				m.IbcNextValidatorsHash = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSelectionAllocation", wireType)
			}
			m.ValidatorSelectionAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSelectionAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoldingsAllocation", wireType)
			}
			m.HoldingsAllocation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoldingsAllocation |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastEpochHeight", wireType)
			}
			m.LastEpochHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastEpochHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tvl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tvl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			m.UnbondingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessagesPerTx", wireType)
			}
			m.MessagesPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessagesPerTx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICAAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICAAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICAAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceWaitgroup", wireType)
			}
			m.BalanceWaitgroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BalanceWaitgroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valoper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Valoper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawalRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawalRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawalRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distribution = append(m.Distribution, &Distribution{})
			if err := m.Distribution[len(m.Distribution)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelatedTxhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelatedTxhash = append(m.RelatedTxhash, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RedelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransferRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransferRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValoperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValoperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VotingPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Score.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JailedSince", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.JailedSince, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorBondShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorBondShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intents = append(m.Intents, &ValidatorIntent{})
			if err := m.Intents[len(m.Intents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValoperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValoperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedelegationEnd", wireType)
			}
			m.RedelegationEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RedelegationEnd |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PortConnectionTuple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PortConnectionTuple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PortConnectionTuple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Receipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstSeen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FirstSeen == nil {
				m.FirstSeen = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.FirstSeen, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Completed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Completed == nil {
				m.Completed = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.Completed, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterchainstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthInterchainstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterchainstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterchainstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterchainstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterchainstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterchainstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterchainstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterchainstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterchainstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterchainstaking = fmt.Errorf("proto: unexpected end of group")
)
