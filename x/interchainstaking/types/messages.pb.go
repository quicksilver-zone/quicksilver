// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/interchainstaking/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRequestRedemption represents a message type to request a burn of qAssets
// for native assets.
type MsgRequestRedemption struct {
	Value              types.Coin `protobuf:"bytes,1,opt,name=value,proto3" json:"value" yaml:"coin"`
	DestinationAddress string     `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	FromAddress        string     `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgRequestRedemption) Reset()         { *m = MsgRequestRedemption{} }
func (m *MsgRequestRedemption) String() string { return proto.CompactTextString(m) }
func (*MsgRequestRedemption) ProtoMessage()    {}
func (*MsgRequestRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{0}
}
func (m *MsgRequestRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestRedemption.Merge(m, src)
}
func (m *MsgRequestRedemption) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestRedemption proto.InternalMessageInfo

// MsgRequestRedemptionResponse defines the MsgRequestRedemption response type.
type MsgRequestRedemptionResponse struct {
}

func (m *MsgRequestRedemptionResponse) Reset()         { *m = MsgRequestRedemptionResponse{} }
func (m *MsgRequestRedemptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestRedemptionResponse) ProtoMessage()    {}
func (*MsgRequestRedemptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{1}
}
func (m *MsgRequestRedemptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestRedemptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestRedemptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestRedemptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestRedemptionResponse.Merge(m, src)
}
func (m *MsgRequestRedemptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestRedemptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestRedemptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestRedemptionResponse proto.InternalMessageInfo

// MsgCancelRedemption represents a message type to cancel .
type MsgCancelRedemption struct {
	ChainId     string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgCancelRedemption) Reset()         { *m = MsgCancelRedemption{} }
func (m *MsgCancelRedemption) String() string { return proto.CompactTextString(m) }
func (*MsgCancelRedemption) ProtoMessage()    {}
func (*MsgCancelRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{2}
}
func (m *MsgCancelRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelRedemption.Merge(m, src)
}
func (m *MsgCancelRedemption) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelRedemption proto.InternalMessageInfo

// MsgCancelRedemptionResponse defines the MsgCancelRedemption response type.
type MsgCancelRedemptionResponse struct {
	Returned types.Coin `protobuf:"bytes,1,opt,name=returned,proto3" json:"returned" yaml:"coin"`
}

func (m *MsgCancelRedemptionResponse) Reset()         { *m = MsgCancelRedemptionResponse{} }
func (m *MsgCancelRedemptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelRedemptionResponse) ProtoMessage()    {}
func (*MsgCancelRedemptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{3}
}
func (m *MsgCancelRedemptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelRedemptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelRedemptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelRedemptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelRedemptionResponse.Merge(m, src)
}
func (m *MsgCancelRedemptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelRedemptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelRedemptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelRedemptionResponse proto.InternalMessageInfo

func (m *MsgCancelRedemptionResponse) GetReturned() types.Coin {
	if m != nil {
		return m.Returned
	}
	return types.Coin{}
}

// MsgUpdateRedemption represents a message type to update a redemption.
type MsgUpdateRedemption struct {
	ChainId     string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	NewStatus   int32  `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	FromAddress string `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgUpdateRedemption) Reset()         { *m = MsgUpdateRedemption{} }
func (m *MsgUpdateRedemption) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRedemption) ProtoMessage()    {}
func (*MsgUpdateRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{4}
}
func (m *MsgUpdateRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRedemption.Merge(m, src)
}
func (m *MsgUpdateRedemption) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRedemption proto.InternalMessageInfo

// MsgUpdateRedemptionResponse defines the MsgUpdateRedemption response type.
type MsgUpdateRedemptionResponse struct {
}

func (m *MsgUpdateRedemptionResponse) Reset()         { *m = MsgUpdateRedemptionResponse{} }
func (m *MsgUpdateRedemptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRedemptionResponse) ProtoMessage()    {}
func (*MsgUpdateRedemptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{5}
}
func (m *MsgUpdateRedemptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRedemptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRedemptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRedemptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRedemptionResponse.Merge(m, src)
}
func (m *MsgUpdateRedemptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRedemptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRedemptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRedemptionResponse proto.InternalMessageInfo

// MsgRequeueRedemption represents a message type to requeue.
type MsgRequeueRedemption struct {
	ChainId     string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Hash        string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgRequeueRedemption) Reset()         { *m = MsgRequeueRedemption{} }
func (m *MsgRequeueRedemption) String() string { return proto.CompactTextString(m) }
func (*MsgRequeueRedemption) ProtoMessage()    {}
func (*MsgRequeueRedemption) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{6}
}
func (m *MsgRequeueRedemption) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequeueRedemption) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequeueRedemption.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequeueRedemption) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequeueRedemption.Merge(m, src)
}
func (m *MsgRequeueRedemption) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequeueRedemption) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequeueRedemption.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequeueRedemption proto.InternalMessageInfo

// MsgRequeueRedemptionResponse defines the MsgRequeueRedemption response type.
type MsgRequeueRedemptionResponse struct {
}

func (m *MsgRequeueRedemptionResponse) Reset()         { *m = MsgRequeueRedemptionResponse{} }
func (m *MsgRequeueRedemptionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequeueRedemptionResponse) ProtoMessage()    {}
func (*MsgRequeueRedemptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{7}
}
func (m *MsgRequeueRedemptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequeueRedemptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequeueRedemptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequeueRedemptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequeueRedemptionResponse.Merge(m, src)
}
func (m *MsgRequeueRedemptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequeueRedemptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequeueRedemptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequeueRedemptionResponse proto.InternalMessageInfo

// MsgSignalIntent represents a message type for signalling voting intent for
// one or more validators.
type MsgSignalIntent struct {
	ChainId     string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty" yaml:"chain_id"`
	Intents     string `protobuf:"bytes,2,opt,name=intents,proto3" json:"intents,omitempty" yaml:"intents"`
	FromAddress string `protobuf:"bytes,3,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgSignalIntent) Reset()         { *m = MsgSignalIntent{} }
func (m *MsgSignalIntent) String() string { return proto.CompactTextString(m) }
func (*MsgSignalIntent) ProtoMessage()    {}
func (*MsgSignalIntent) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{8}
}
func (m *MsgSignalIntent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignalIntent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignalIntent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignalIntent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignalIntent.Merge(m, src)
}
func (m *MsgSignalIntent) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignalIntent) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignalIntent.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignalIntent proto.InternalMessageInfo

// MsgSignalIntentResponse defines the MsgSignalIntent response type.
type MsgSignalIntentResponse struct {
}

func (m *MsgSignalIntentResponse) Reset()         { *m = MsgSignalIntentResponse{} }
func (m *MsgSignalIntentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignalIntentResponse) ProtoMessage()    {}
func (*MsgSignalIntentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{9}
}
func (m *MsgSignalIntentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignalIntentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignalIntentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignalIntentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignalIntentResponse.Merge(m, src)
}
func (m *MsgSignalIntentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignalIntentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignalIntentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignalIntentResponse proto.InternalMessageInfo

// MsgForceICASend represents a governance-only message that causes a transfer
// of tokens from one ICA to another address.
type MsgForceICASend struct {
	SourceAddress      string     `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	DestinationAddress string     `protobuf:"bytes,2,opt,name=destination_address,json=destinationAddress,proto3" json:"destination_address,omitempty"`
	Amount             types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount" yaml:"coin"`
	FromAddress        string     `protobuf:"bytes,4,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty"`
}

func (m *MsgForceICASend) Reset()         { *m = MsgForceICASend{} }
func (m *MsgForceICASend) String() string { return proto.CompactTextString(m) }
func (*MsgForceICASend) ProtoMessage()    {}
func (*MsgForceICASend) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{10}
}
func (m *MsgForceICASend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgForceICASend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgForceICASend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgForceICASend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgForceICASend.Merge(m, src)
}
func (m *MsgForceICASend) XXX_Size() int {
	return m.Size()
}
func (m *MsgForceICASend) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgForceICASend.DiscardUnknown(m)
}

var xxx_messageInfo_MsgForceICASend proto.InternalMessageInfo

// MsgForceICASendResponse defines the MsgForceICASend response type.
type MsgForceICASendResponse struct {
}

func (m *MsgForceICASendResponse) Reset()         { *m = MsgForceICASendResponse{} }
func (m *MsgForceICASendResponse) String() string { return proto.CompactTextString(m) }
func (*MsgForceICASendResponse) ProtoMessage()    {}
func (*MsgForceICASendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee484030fa140a82, []int{11}
}
func (m *MsgForceICASendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgForceICASendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgForceICASendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgForceICASendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgForceICASendResponse.Merge(m, src)
}
func (m *MsgForceICASendResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgForceICASendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgForceICASendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgForceICASendResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRequestRedemption)(nil), "quicksilver.interchainstaking.v1.MsgRequestRedemption")
	proto.RegisterType((*MsgRequestRedemptionResponse)(nil), "quicksilver.interchainstaking.v1.MsgRequestRedemptionResponse")
	proto.RegisterType((*MsgCancelRedemption)(nil), "quicksilver.interchainstaking.v1.MsgCancelRedemption")
	proto.RegisterType((*MsgCancelRedemptionResponse)(nil), "quicksilver.interchainstaking.v1.MsgCancelRedemptionResponse")
	proto.RegisterType((*MsgUpdateRedemption)(nil), "quicksilver.interchainstaking.v1.MsgUpdateRedemption")
	proto.RegisterType((*MsgUpdateRedemptionResponse)(nil), "quicksilver.interchainstaking.v1.MsgUpdateRedemptionResponse")
	proto.RegisterType((*MsgRequeueRedemption)(nil), "quicksilver.interchainstaking.v1.MsgRequeueRedemption")
	proto.RegisterType((*MsgRequeueRedemptionResponse)(nil), "quicksilver.interchainstaking.v1.MsgRequeueRedemptionResponse")
	proto.RegisterType((*MsgSignalIntent)(nil), "quicksilver.interchainstaking.v1.MsgSignalIntent")
	proto.RegisterType((*MsgSignalIntentResponse)(nil), "quicksilver.interchainstaking.v1.MsgSignalIntentResponse")
	proto.RegisterType((*MsgForceICASend)(nil), "quicksilver.interchainstaking.v1.MsgForceICASend")
	proto.RegisterType((*MsgForceICASendResponse)(nil), "quicksilver.interchainstaking.v1.MsgForceICASendResponse")
}

func init() {
	proto.RegisterFile("quicksilver/interchainstaking/v1/messages.proto", fileDescriptor_ee484030fa140a82)
}

var fileDescriptor_ee484030fa140a82 = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x97, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xc7, 0xd7, 0xfd, 0x9d, 0x49, 0xda, 0xb4, 0x4e, 0xa4, 0x26, 0xa6, 0xdd, 0x8d, 0x2c, 0x21,
	0x55, 0x40, 0xed, 0x26, 0x6d, 0x53, 0x48, 0xda, 0x40, 0x76, 0xa3, 0xac, 0x16, 0x35, 0x17, 0xaf,
	0xe0, 0x00, 0x87, 0xd5, 0xc4, 0x7e, 0xf5, 0x5a, 0xb5, 0x67, 0x5c, 0xcf, 0xd8, 0x6d, 0x38, 0x72,
	0x42, 0x82, 0x03, 0x12, 0xff, 0x40, 0xcf, 0x9c, 0x2b, 0xc4, 0x8d, 0x03, 0x1c, 0x22, 0x71, 0xa0,
	0x82, 0x0b, 0x12, 0x52, 0x84, 0x12, 0x90, 0x38, 0x21, 0x91, 0x13, 0x47, 0xe4, 0xb1, 0xd7, 0xf5,
	0xee, 0x1a, 0xe2, 0xdd, 0x46, 0xe2, 0xb6, 0x9e, 0xf1, 0xf7, 0xf9, 0xfb, 0x79, 0xef, 0xcd, 0x1b,
	0x2d, 0xd2, 0x1f, 0x85, 0x8e, 0xf9, 0x90, 0x39, 0x6e, 0x04, 0x81, 0xee, 0x10, 0x0e, 0x81, 0xd9,
	0xc5, 0x0e, 0x61, 0x1c, 0x3f, 0x74, 0x88, 0xad, 0x47, 0x8b, 0xba, 0x07, 0x8c, 0x61, 0x1b, 0x98,
	0xe6, 0x07, 0x94, 0x53, 0x79, 0x21, 0x27, 0xd0, 0x86, 0x04, 0x5a, 0xb4, 0xa8, 0x54, 0x4d, 0xca,
	0x3c, 0xca, 0xf4, 0x6d, 0xcc, 0x40, 0x8f, 0x16, 0xb7, 0x81, 0xe3, 0x45, 0xdd, 0xa4, 0x0e, 0x49,
	0x22, 0x28, 0xf3, 0xc9, 0x7e, 0x47, 0x3c, 0xe9, 0xc9, 0x43, 0xba, 0x35, 0x6b, 0x53, 0x9b, 0x26,
	0xeb, 0xf1, 0xaf, 0x74, 0xf5, 0x8a, 0x4d, 0xa9, 0xed, 0x82, 0x8e, 0x7d, 0x47, 0xc7, 0x84, 0x50,
	0x8e, 0xb9, 0x43, 0x49, 0x4f, 0x73, 0xe3, 0x48, 0x02, 0x3f, 0xa0, 0x3e, 0x65, 0xd8, 0x4d, 0x15,
	0xea, 0x9f, 0x12, 0x9a, 0xdd, 0x62, 0xb6, 0x01, 0x8f, 0x42, 0x60, 0xdc, 0x00, 0x0b, 0x3c, 0x3f,
	0x8e, 0x28, 0x6f, 0xa0, 0xd3, 0x11, 0x76, 0x43, 0x98, 0x93, 0x16, 0xa4, 0x6b, 0x93, 0x4b, 0xf3,
	0x5a, 0x6a, 0x2e, 0x26, 0xd1, 0x52, 0x12, 0xad, 0x41, 0x1d, 0x52, 0x9f, 0xd9, 0xdd, 0xab, 0x55,
	0x0e, 0xf7, 0x6a, 0x93, 0x3b, 0xd8, 0x73, 0x57, 0xd4, 0x98, 0x4e, 0x35, 0x12, 0xb1, 0xdc, 0x42,
	0x33, 0x16, 0x30, 0xee, 0x10, 0x61, 0xb3, 0x83, 0x2d, 0x2b, 0x00, 0xc6, 0xe6, 0x4e, 0x2c, 0x48,
	0xd7, 0x26, 0xea, 0x73, 0x3f, 0x3e, 0xbb, 0x3e, 0x9b, 0x86, 0x5d, 0x4f, 0x76, 0xda, 0x3c, 0x70,
	0x88, 0x6d, 0xc8, 0x39, 0x51, 0xba, 0x23, 0xaf, 0xa2, 0xa9, 0x07, 0x01, 0xf5, 0xb2, 0x18, 0x27,
	0x8f, 0x88, 0x31, 0x19, 0xbf, 0x9d, 0x2e, 0xad, 0x9c, 0xfb, 0xe4, 0x69, 0xad, 0xf2, 0xc7, 0xd3,
	0x5a, 0x45, 0xad, 0xa2, 0x2b, 0x45, 0xbc, 0x06, 0x30, 0x9f, 0x12, 0x06, 0xea, 0xa7, 0x12, 0x9a,
	0xd9, 0x62, 0x76, 0x03, 0x13, 0x13, 0xdc, 0x5c, 0x3e, 0xe6, 0xd1, 0x39, 0x91, 0xcb, 0x8e, 0x63,
	0x89, 0x94, 0x4c, 0x18, 0x67, 0xc5, 0x73, 0xcb, 0x92, 0x65, 0x74, 0xaa, 0x8b, 0x59, 0x37, 0xa1,
	0x32, 0xc4, 0xef, 0xe3, 0x72, 0xeb, 0xa0, 0x57, 0x0a, 0xcc, 0xf4, 0xcc, 0xca, 0xef, 0xa2, 0x73,
	0x01, 0xf0, 0x30, 0x20, 0x60, 0x8d, 0x59, 0xa7, 0x4c, 0xaf, 0x7e, 0x99, 0x80, 0xbf, 0xe7, 0x5b,
	0x98, 0xc3, 0xf8, 0xe0, 0x57, 0x11, 0x22, 0xf0, 0xb8, 0xc3, 0x38, 0xe6, 0x61, 0x82, 0x7d, 0xda,
	0x98, 0x20, 0xf0, 0xb8, 0x2d, 0x16, 0x86, 0xf2, 0x72, 0x6a, 0xbc, 0xbc, 0x5c, 0x15, 0x79, 0x19,
	0xf4, 0x9a, 0x15, 0xf1, 0xb3, 0x5c, 0x57, 0x87, 0xf0, 0xbf, 0x57, 0x31, 0xd7, 0x73, 0x61, 0x91,
	0xdd, 0xaf, 0x24, 0x34, 0xbd, 0xc5, 0xec, 0xb6, 0x63, 0x13, 0xec, 0xb6, 0x08, 0x07, 0xc2, 0x65,
	0x6d, 0xd0, 0x69, 0x7d, 0xe6, 0x70, 0xaf, 0x36, 0x9d, 0xd6, 0x2e, 0xdd, 0x51, 0x5f, 0xd8, 0x7f,
	0x03, 0x9d, 0x75, 0x84, 0xb2, 0x77, 0xba, 0xe4, 0xc3, 0xbd, 0xda, 0x85, 0xe4, 0xf5, 0x74, 0x43,
	0x35, 0x7a, 0xaf, 0x1c, 0x17, 0xd8, 0x3c, 0xba, 0x3c, 0xe0, 0x3b, 0x63, 0xfa, 0x3b, 0x61, 0xda,
	0xa4, 0x81, 0x09, 0xad, 0xc6, 0x7a, 0x1b, 0x88, 0x25, 0xbf, 0x8a, 0x2e, 0x30, 0x1a, 0x06, 0x26,
	0x64, 0xdf, 0x4d, 0x6a, 0x70, 0x3e, 0x59, 0xed, 0x9d, 0x74, 0xfd, 0x3f, 0x86, 0x46, 0xe1, 0x68,
	0xd8, 0x44, 0x67, 0xb0, 0x47, 0x43, 0xc2, 0x05, 0xc7, 0xe8, 0x87, 0x20, 0x55, 0x1f, 0x57, 0x73,
	0x26, 0x59, 0xc9, 0x93, 0xf7, 0xb2, 0xb2, 0xf4, 0xcb, 0x25, 0x74, 0x72, 0x8b, 0xd9, 0xf2, 0xb7,
	0x12, 0xba, 0x34, 0x3c, 0x73, 0x97, 0xb5, 0xa3, 0x2e, 0x14, 0xad, 0x68, 0x76, 0x29, 0x6b, 0xe3,
	0xe9, 0xb2, 0x5a, 0x2d, 0x7f, 0xfc, 0xd3, 0x6f, 0x5f, 0x9c, 0xb8, 0xa1, 0xbe, 0xde, 0x77, 0x03,
	0xf2, 0x27, 0xf1, 0x85, 0x31, 0x7c, 0x8b, 0x04, 0x60, 0x01, 0x78, 0x2b, 0xd2, 0x6b, 0xf2, 0x33,
	0x09, 0x4d, 0xf5, 0x35, 0xed, 0x62, 0x29, 0x23, 0x79, 0x89, 0xf2, 0xd6, 0xc8, 0x92, 0x31, 0x6d,
	0x27, 0xad, 0x1f, 0xdb, 0xfe, 0x5e, 0x42, 0x17, 0x87, 0xe6, 0xfb, 0xed, 0x52, 0x3e, 0x06, 0x65,
	0xca, 0xbd, 0xb1, 0x64, 0x19, 0xc2, 0xba, 0x40, 0x58, 0x55, 0x97, 0x4b, 0x21, 0x98, 0x22, 0x4c,
	0x27, 0xc8, 0xe2, 0xc4, 0x34, 0x3f, 0xf4, 0x5a, 0xa9, 0x6f, 0xd0, 0x8d, 0xd0, 0x4a, 0x79, 0xdd,
	0x28, 0xad, 0x54, 0x38, 0xca, 0xea, 0x02, 0xe8, 0xae, 0x7a, 0xa7, 0x64, 0x2b, 0x89, 0x38, 0x03,
	0x44, 0x71, 0x7d, 0x86, 0xae, 0xa1, 0x72, 0xf5, 0x19, 0x94, 0x95, 0xac, 0xcf, 0xbf, 0x5e, 0x24,
	0xa3, 0xd5, 0x27, 0x14, 0x61, 0x06, 0x68, 0xbe, 0x96, 0xd0, 0x54, 0x93, 0x46, 0x62, 0x1c, 0x88,
	0x29, 0x58, 0xee, 0x90, 0xe4, 0xc7, 0x47, 0xc9, 0x43, 0x52, 0x34, 0x71, 0xd4, 0x15, 0x41, 0x70,
	0x4b, 0xd5, 0x4b, 0x11, 0x3c, 0x88, 0x43, 0x74, 0x18, 0x10, 0x2b, 0xb6, 0xfe, 0x9d, 0x84, 0xa6,
	0x9b, 0x34, 0x6a, 0xb8, 0x94, 0x41, 0xa3, 0x8b, 0x09, 0x01, 0x57, 0xbe, 0x55, 0xca, 0xca, 0x80,
	0x4a, 0xb9, 0x3b, 0x8e, 0x2a, 0x63, 0xb8, 0x27, 0x18, 0xee, 0xa8, 0x4b, 0xe5, 0x4e, 0x49, 0x1c,
	0xa2, 0x63, 0x26, 0x31, 0x62, 0x8c, 0x5d, 0x09, 0x5d, 0x6c, 0xd2, 0xc8, 0x00, 0xea, 0x03, 0xe9,
	0x71, 0xdc, 0x2e, 0xeb, 0xa8, 0x4f, 0x56, 0xb2, 0x9f, 0x06, 0x65, 0x19, 0xc9, 0x9a, 0x20, 0x79,
	0x53, 0xbd, 0x59, 0xf2, 0x78, 0xc4, 0x31, 0xf2, 0x28, 0xdf, 0x48, 0xe8, 0x7c, 0x93, 0x46, 0x6d,
	0xe0, 0xf7, 0x99, 0xd7, 0xc0, 0x3e, 0x93, 0x97, 0xca, 0x1a, 0x7a, 0xa1, 0x51, 0x56, 0x46, 0xd7,
	0x1c, 0x1b, 0xc1, 0xef, 0x12, 0xba, 0xdc, 0xa4, 0xd1, 0xba, 0x65, 0xbd, 0x8f, 0x5d, 0xc7, 0xc2,
	0x9c, 0x06, 0x1b, 0x40, 0x76, 0xee, 0x3b, 0x8c, 0xcb, 0xa5, 0xbb, 0xa4, 0x48, 0xad, 0x6c, 0xbc,
	0x8c, 0x3a, 0xe3, 0xdb, 0x14, 0x7c, 0xef, 0xa8, 0xab, 0xa5, 0xf8, 0xb0, 0x65, 0x75, 0xa2, 0x5e,
	0xac, 0x8e, 0x05, 0x64, 0xc7, 0x75, 0x98, 0xb8, 0x64, 0xfe, 0x92, 0x90, 0x22, 0xda, 0xc0, 0xa3,
	0x11, 0x0c, 0xa3, 0xbe, 0x5d, 0xbe, 0x8f, 0x0a, 0x03, 0x28, 0xcd, 0x97, 0x0c, 0x90, 0x01, 0xb7,
	0x04, 0x70, 0x43, 0x5d, 0x2b, 0x59, 0xd0, 0x38, 0x5a, 0x31, 0x73, 0xfd, 0xc3, 0xdd, 0xfd, 0xaa,
	0xf4, 0x7c, 0xbf, 0x2a, 0xfd, 0xba, 0x5f, 0x95, 0x3e, 0x3f, 0xa8, 0x56, 0x9e, 0x1f, 0x54, 0x2b,
	0x3f, 0x1f, 0x54, 0x2b, 0x1f, 0xac, 0xdb, 0x0e, 0xef, 0x86, 0xdb, 0x9a, 0x49, 0xbd, 0xfc, 0x67,
	0xae, 0x7f, 0x44, 0x09, 0xf4, 0x7d, 0xf7, 0x49, 0xc1, 0x37, 0xf9, 0x8e, 0x0f, 0x6c, 0xfb, 0x8c,
	0xf8, 0xc3, 0x7a, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x0c, 0xda, 0xf1, 0xa6, 0x0f,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RequestRedemption defines a method for requesting burning of qAssets for
	// native assets.
	RequestRedemption(ctx context.Context, in *MsgRequestRedemption, opts ...grpc.CallOption) (*MsgRequestRedemptionResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	SignalIntent(ctx context.Context, in *MsgSignalIntent, opts ...grpc.CallOption) (*MsgSignalIntentResponse, error)
	// CancelRedemption defines a method for cancelling a redemption request and
	// returning the escrowed assets.
	CancelRedemption(ctx context.Context, in *MsgCancelRedemption, opts ...grpc.CallOption) (*MsgCancelRedemptionResponse, error)
	// RequeueRedemption defines a method for requeuing a failed redemption.
	RequeueRedemption(ctx context.Context, in *MsgRequeueRedemption, opts ...grpc.CallOption) (*MsgRequeueRedemptionResponse, error)
	// UpdateRedemption defines a method for updating a redemption.
	UpdateRedemption(ctx context.Context, in *MsgUpdateRedemption, opts ...grpc.CallOption) (*MsgUpdateRedemptionResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	GovForceSend(ctx context.Context, in *MsgForceICASend, opts ...grpc.CallOption) (*MsgForceICASendResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	GovCloseChannel(ctx context.Context, in *MsgGovCloseChannel, opts ...grpc.CallOption) (*MsgGovCloseChannelResponse, error)
	GovReopenChannel(ctx context.Context, in *MsgGovReopenChannel, opts ...grpc.CallOption) (*MsgGovReopenChannelResponse, error)
	GovSetLsmCaps(ctx context.Context, in *MsgGovSetLsmCaps, opts ...grpc.CallOption) (*MsgGovSetLsmCapsResponse, error)
	GovAddValidatorDenyList(ctx context.Context, in *MsgGovAddValidatorDenyList, opts ...grpc.CallOption) (*MsgGovAddValidatorDenyListResponse, error)
	GovRemoveValidatorDenyList(ctx context.Context, in *MsgGovRemoveValidatorDenyList, opts ...grpc.CallOption) (*MsgGovRemoveValidatorDenyListResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RequestRedemption(ctx context.Context, in *MsgRequestRedemption, opts ...grpc.CallOption) (*MsgRequestRedemptionResponse, error) {
	out := new(MsgRequestRedemptionResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/RequestRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignalIntent(ctx context.Context, in *MsgSignalIntent, opts ...grpc.CallOption) (*MsgSignalIntentResponse, error) {
	out := new(MsgSignalIntentResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/SignalIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelRedemption(ctx context.Context, in *MsgCancelRedemption, opts ...grpc.CallOption) (*MsgCancelRedemptionResponse, error) {
	out := new(MsgCancelRedemptionResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/CancelRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequeueRedemption(ctx context.Context, in *MsgRequeueRedemption, opts ...grpc.CallOption) (*MsgRequeueRedemptionResponse, error) {
	out := new(MsgRequeueRedemptionResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/RequeueRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRedemption(ctx context.Context, in *MsgUpdateRedemption, opts ...grpc.CallOption) (*MsgUpdateRedemptionResponse, error) {
	out := new(MsgUpdateRedemptionResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/UpdateRedemption", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovForceSend(ctx context.Context, in *MsgForceICASend, opts ...grpc.CallOption) (*MsgForceICASendResponse, error) {
	out := new(MsgForceICASendResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovForceSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovCloseChannel(ctx context.Context, in *MsgGovCloseChannel, opts ...grpc.CallOption) (*MsgGovCloseChannelResponse, error) {
	out := new(MsgGovCloseChannelResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovCloseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovReopenChannel(ctx context.Context, in *MsgGovReopenChannel, opts ...grpc.CallOption) (*MsgGovReopenChannelResponse, error) {
	out := new(MsgGovReopenChannelResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovReopenChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovSetLsmCaps(ctx context.Context, in *MsgGovSetLsmCaps, opts ...grpc.CallOption) (*MsgGovSetLsmCapsResponse, error) {
	out := new(MsgGovSetLsmCapsResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovSetLsmCaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovAddValidatorDenyList(ctx context.Context, in *MsgGovAddValidatorDenyList, opts ...grpc.CallOption) (*MsgGovAddValidatorDenyListResponse, error) {
	out := new(MsgGovAddValidatorDenyListResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovAddValidatorDenyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GovRemoveValidatorDenyList(ctx context.Context, in *MsgGovRemoveValidatorDenyList, opts ...grpc.CallOption) (*MsgGovRemoveValidatorDenyListResponse, error) {
	out := new(MsgGovRemoveValidatorDenyListResponse)
	err := c.cc.Invoke(ctx, "/quicksilver.interchainstaking.v1.Msg/GovRemoveValidatorDenyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RequestRedemption defines a method for requesting burning of qAssets for
	// native assets.
	RequestRedemption(context.Context, *MsgRequestRedemption) (*MsgRequestRedemptionResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	SignalIntent(context.Context, *MsgSignalIntent) (*MsgSignalIntentResponse, error)
	// CancelRedemption defines a method for cancelling a redemption request and
	// returning the escrowed assets.
	CancelRedemption(context.Context, *MsgCancelRedemption) (*MsgCancelRedemptionResponse, error)
	// RequeueRedemption defines a method for requeuing a failed redemption.
	RequeueRedemption(context.Context, *MsgRequeueRedemption) (*MsgRequeueRedemptionResponse, error)
	// UpdateRedemption defines a method for updating a redemption.
	UpdateRedemption(context.Context, *MsgUpdateRedemption) (*MsgUpdateRedemptionResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	GovForceSend(context.Context, *MsgForceICASend) (*MsgForceICASendResponse, error)
	// SignalIntent defines a method for signalling voting intent for one or more
	// validators.
	GovCloseChannel(context.Context, *MsgGovCloseChannel) (*MsgGovCloseChannelResponse, error)
	GovReopenChannel(context.Context, *MsgGovReopenChannel) (*MsgGovReopenChannelResponse, error)
	GovSetLsmCaps(context.Context, *MsgGovSetLsmCaps) (*MsgGovSetLsmCapsResponse, error)
	GovAddValidatorDenyList(context.Context, *MsgGovAddValidatorDenyList) (*MsgGovAddValidatorDenyListResponse, error)
	GovRemoveValidatorDenyList(context.Context, *MsgGovRemoveValidatorDenyList) (*MsgGovRemoveValidatorDenyListResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RequestRedemption(ctx context.Context, req *MsgRequestRedemption) (*MsgRequestRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRedemption not implemented")
}
func (*UnimplementedMsgServer) SignalIntent(ctx context.Context, req *MsgSignalIntent) (*MsgSignalIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalIntent not implemented")
}
func (*UnimplementedMsgServer) CancelRedemption(ctx context.Context, req *MsgCancelRedemption) (*MsgCancelRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRedemption not implemented")
}
func (*UnimplementedMsgServer) RequeueRedemption(ctx context.Context, req *MsgRequeueRedemption) (*MsgRequeueRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequeueRedemption not implemented")
}
func (*UnimplementedMsgServer) UpdateRedemption(ctx context.Context, req *MsgUpdateRedemption) (*MsgUpdateRedemptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRedemption not implemented")
}
func (*UnimplementedMsgServer) GovForceSend(ctx context.Context, req *MsgForceICASend) (*MsgForceICASendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovForceSend not implemented")
}
func (*UnimplementedMsgServer) GovCloseChannel(ctx context.Context, req *MsgGovCloseChannel) (*MsgGovCloseChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovCloseChannel not implemented")
}
func (*UnimplementedMsgServer) GovReopenChannel(ctx context.Context, req *MsgGovReopenChannel) (*MsgGovReopenChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovReopenChannel not implemented")
}
func (*UnimplementedMsgServer) GovSetLsmCaps(ctx context.Context, req *MsgGovSetLsmCaps) (*MsgGovSetLsmCapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovSetLsmCaps not implemented")
}
func (*UnimplementedMsgServer) GovAddValidatorDenyList(ctx context.Context, req *MsgGovAddValidatorDenyList) (*MsgGovAddValidatorDenyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovAddValidatorDenyList not implemented")
}
func (*UnimplementedMsgServer) GovRemoveValidatorDenyList(ctx context.Context, req *MsgGovRemoveValidatorDenyList) (*MsgGovRemoveValidatorDenyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GovRemoveValidatorDenyList not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RequestRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestRedemption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/RequestRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestRedemption(ctx, req.(*MsgRequestRedemption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignalIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignalIntent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignalIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/SignalIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignalIntent(ctx, req.(*MsgSignalIntent))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelRedemption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/CancelRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelRedemption(ctx, req.(*MsgCancelRedemption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequeueRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequeueRedemption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequeueRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/RequeueRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequeueRedemption(ctx, req.(*MsgRequeueRedemption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRedemption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRedemption)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRedemption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/UpdateRedemption",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRedemption(ctx, req.(*MsgUpdateRedemption))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovForceSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgForceICASend)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovForceSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovForceSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovForceSend(ctx, req.(*MsgForceICASend))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovCloseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovCloseChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovCloseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovCloseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovCloseChannel(ctx, req.(*MsgGovCloseChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovReopenChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovReopenChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovReopenChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovReopenChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovReopenChannel(ctx, req.(*MsgGovReopenChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovSetLsmCaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovSetLsmCaps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovSetLsmCaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovSetLsmCaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovSetLsmCaps(ctx, req.(*MsgGovSetLsmCaps))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovAddValidatorDenyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovAddValidatorDenyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovAddValidatorDenyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovAddValidatorDenyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovAddValidatorDenyList(ctx, req.(*MsgGovAddValidatorDenyList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GovRemoveValidatorDenyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGovRemoveValidatorDenyList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GovRemoveValidatorDenyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quicksilver.interchainstaking.v1.Msg/GovRemoveValidatorDenyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GovRemoveValidatorDenyList(ctx, req.(*MsgGovRemoveValidatorDenyList))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quicksilver.interchainstaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestRedemption",
			Handler:    _Msg_RequestRedemption_Handler,
		},
		{
			MethodName: "SignalIntent",
			Handler:    _Msg_SignalIntent_Handler,
		},
		{
			MethodName: "CancelRedemption",
			Handler:    _Msg_CancelRedemption_Handler,
		},
		{
			MethodName: "RequeueRedemption",
			Handler:    _Msg_RequeueRedemption_Handler,
		},
		{
			MethodName: "UpdateRedemption",
			Handler:    _Msg_UpdateRedemption_Handler,
		},
		{
			MethodName: "GovForceSend",
			Handler:    _Msg_GovForceSend_Handler,
		},
		{
			MethodName: "GovCloseChannel",
			Handler:    _Msg_GovCloseChannel_Handler,
		},
		{
			MethodName: "GovReopenChannel",
			Handler:    _Msg_GovReopenChannel_Handler,
		},
		{
			MethodName: "GovSetLsmCaps",
			Handler:    _Msg_GovSetLsmCaps_Handler,
		},
		{
			MethodName: "GovAddValidatorDenyList",
			Handler:    _Msg_GovAddValidatorDenyList_Handler,
		},
		{
			MethodName: "GovRemoveValidatorDenyList",
			Handler:    _Msg_GovRemoveValidatorDenyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quicksilver/interchainstaking/v1/messages.proto",
}

func (m *MsgRequestRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgRequestRedemptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestRedemptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestRedemptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelRedemptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelRedemptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelRedemptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Returned.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.NewStatus != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRedemptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRedemptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRedemptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequeueRedemption) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequeueRedemption) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequeueRedemption) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequeueRedemptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequeueRedemptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequeueRedemptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignalIntent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignalIntent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignalIntent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Intents) > 0 {
		i -= len(m.Intents)
		copy(dAtA[i:], m.Intents)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Intents)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignalIntentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignalIntentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignalIntentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgForceICASend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgForceICASend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgForceICASend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestinationAddress) > 0 {
		i -= len(m.DestinationAddress)
		copy(dAtA[i:], m.DestinationAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.DestinationAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceAddress) > 0 {
		i -= len(m.SourceAddress)
		copy(dAtA[i:], m.SourceAddress)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.SourceAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgForceICASendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgForceICASendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgForceICASendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRequestRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgRequestRedemptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgCancelRedemptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Returned.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgUpdateRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.NewStatus != 0 {
		n += 1 + sovMessages(uint64(m.NewStatus))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgUpdateRedemptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequeueRedemption) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgRequeueRedemptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignalIntent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Intents)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgSignalIntentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgForceICASend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.DestinationAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMessages(uint64(l))
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgForceICASendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRequestRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestRedemptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestRedemptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestRedemptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelRedemptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelRedemptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelRedemptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Returned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Returned.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRedemptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRedemptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRedemptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequeueRedemption) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequeueRedemption: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequeueRedemption: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequeueRedemptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequeueRedemptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequeueRedemptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignalIntent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignalIntent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignalIntent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intents", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intents = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignalIntentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignalIntentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignalIntentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgForceICASend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgForceICASend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgForceICASend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgForceICASendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgForceICASendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgForceICASendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
