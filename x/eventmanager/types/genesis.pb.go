// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/eventmanager/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	ChainId          string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	EventType        int32  `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Identifier       string `protobuf:"bytes,3,opt,name=identifier,proto3" json:"identifier,omitempty"`
	EventStatus      int32  `protobuf:"varint,4,opt,name=event_status,json=eventStatus,proto3" json:"event_status,omitempty"`
	Module           string `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
	Callback         string `protobuf:"bytes,6,opt,name=callback,proto3" json:"callback,omitempty"`
	Payload          []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
	ExecuteCondition []byte `protobuf:"bytes,8,opt,name=execute_condition,json=executeCondition,proto3" json:"execute_condition,omitempty"`
	EmittedHeight    int64  `protobuf:"varint,9,opt,name=emitted_height,json=emittedHeight,proto3" json:"emitted_height,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_74127b30ab787dbd, []int{0}
}
func (m *Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return m.Size()
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Event) GetEventType() int32 {
	if m != nil {
		return m.EventType
	}
	return 0
}

func (m *Event) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *Event) GetEventStatus() int32 {
	if m != nil {
		return m.EventStatus
	}
	return 0
}

func (m *Event) GetModule() string {
	if m != nil {
		return m.Module
	}
	return ""
}

func (m *Event) GetCallback() string {
	if m != nil {
		return m.Callback
	}
	return ""
}

func (m *Event) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Event) GetExecuteCondition() []byte {
	if m != nil {
		return m.ExecuteCondition
	}
	return nil
}

func (m *Event) GetEmittedHeight() int64 {
	if m != nil {
		return m.EmittedHeight
	}
	return 0
}

// GenesisState defines the eventmanager module's genesis state.
type GenesisState struct {
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_74127b30ab787dbd, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Event)(nil), "quicksilver.eventmanager.v1.Event")
	proto.RegisterType((*GenesisState)(nil), "quicksilver.eventmanager.v1.GenesisState")
}

func init() {
	proto.RegisterFile("quicksilver/eventmanager/v1/genesis.proto", fileDescriptor_74127b30ab787dbd)
}

var fileDescriptor_74127b30ab787dbd = []byte{
	// 390 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcd, 0x6e, 0xd4, 0x30,
	0x14, 0x85, 0xc7, 0x2d, 0xf3, 0x67, 0x86, 0x0a, 0x2c, 0x84, 0xcc, 0x20, 0x4c, 0xa8, 0x84, 0x14,
	0x84, 0x88, 0x55, 0xb1, 0x65, 0x05, 0x42, 0xc0, 0x36, 0x20, 0x16, 0x6c, 0x22, 0x27, 0xbe, 0x75,
	0xac, 0x26, 0x76, 0x48, 0x9c, 0xa8, 0xc3, 0x53, 0xf0, 0x14, 0x3c, 0x0b, 0xcb, 0x2e, 0x59, 0xa2,
	0x99, 0x17, 0x41, 0x71, 0x52, 0x14, 0xba, 0xcb, 0xf9, 0xce, 0x39, 0xc9, 0xd5, 0xbd, 0xc1, 0xcf,
	0xbf, 0xb5, 0x3a, 0xbb, 0x68, 0x74, 0xd1, 0x41, 0xcd, 0xa1, 0x03, 0xe3, 0x4a, 0x61, 0x84, 0x82,
	0x9a, 0x77, 0x67, 0x5c, 0x81, 0x81, 0x46, 0x37, 0x51, 0x55, 0x5b, 0x67, 0xc9, 0xa3, 0x49, 0x34,
	0x9a, 0x46, 0xa3, 0xee, 0x6c, 0x7b, 0x5f, 0x59, 0x65, 0x7d, 0x8e, 0xf7, 0x4f, 0x43, 0x65, 0xcb,
	0x94, 0xb5, 0xaa, 0x00, 0xee, 0x55, 0xda, 0x9e, 0x73, 0xd9, 0xd6, 0xc2, 0x69, 0x6b, 0x46, 0xff,
	0xc9, 0x4d, 0xdf, 0xe9, 0x12, 0x1a, 0x27, 0xca, 0x6a, 0x08, 0x9c, 0xfe, 0x3c, 0xc2, 0xf3, 0x77,
	0xfd, 0xa7, 0xc8, 0x43, 0xbc, 0xca, 0x72, 0xa1, 0x4d, 0xa2, 0x25, 0x45, 0x01, 0x0a, 0xd7, 0xf1,
	0xd2, 0xeb, 0x8f, 0x92, 0x3c, 0xc6, 0xd8, 0x8f, 0x93, 0xb8, 0x5d, 0x05, 0xf4, 0x28, 0x40, 0xe1,
	0x3c, 0x5e, 0x7b, 0xf2, 0x79, 0x57, 0x01, 0x61, 0x18, 0x6b, 0x09, 0xc6, 0xe9, 0x73, 0x0d, 0x35,
	0x3d, 0xf6, 0xdd, 0x09, 0x21, 0x4f, 0xf1, 0x66, 0xa8, 0x37, 0x4e, 0xb8, 0xb6, 0xa1, 0xb7, 0xfc,
	0x0b, 0x6e, 0x7b, 0xf6, 0xc9, 0x23, 0xf2, 0x00, 0x2f, 0x4a, 0x2b, 0xdb, 0x02, 0xe8, 0xdc, 0xd7,
	0x47, 0x45, 0xb6, 0x78, 0x95, 0x89, 0xa2, 0x48, 0x45, 0x76, 0x41, 0x17, 0xde, 0xf9, 0xa7, 0x09,
	0xc5, 0xcb, 0x4a, 0xec, 0x0a, 0x2b, 0x24, 0x5d, 0x06, 0x28, 0xdc, 0xc4, 0xd7, 0x92, 0xbc, 0xc0,
	0xf7, 0xe0, 0x12, 0xb2, 0xd6, 0x41, 0x92, 0x59, 0x23, 0x75, 0xbf, 0x10, 0xba, 0xf2, 0x99, 0xbb,
	0xa3, 0xf1, 0xf6, 0x9a, 0x93, 0x67, 0xf8, 0x04, 0x4a, 0xed, 0x1c, 0xc8, 0x24, 0x07, 0xad, 0x72,
	0x47, 0xd7, 0x01, 0x0a, 0x8f, 0xe3, 0x3b, 0x23, 0xfd, 0xe0, 0xe1, 0xe9, 0x09, 0xde, 0xbc, 0x1f,
	0xae, 0xd5, 0x8f, 0x0c, 0x6f, 0xbe, 0xfc, 0xda, 0x33, 0x74, 0xb5, 0x67, 0xe8, 0xcf, 0x9e, 0xa1,
	0x1f, 0x07, 0x36, 0xbb, 0x3a, 0xb0, 0xd9, 0xef, 0x03, 0x9b, 0x7d, 0x7d, 0xad, 0xb4, 0xcb, 0xdb,
	0x34, 0xca, 0x6c, 0xc9, 0x27, 0x17, 0x7d, 0xf9, 0xdd, 0x1a, 0x98, 0x02, 0x7e, 0xf9, 0xff, 0xff,
	0xd0, 0x2f, 0xb7, 0x49, 0x17, 0xfe, 0x2e, 0xaf, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0x64, 0x4b,
	0x05, 0x58, 0x38, 0x02, 0x00, 0x00,
}

func (m *Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EmittedHeight != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EmittedHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ExecuteCondition) > 0 {
		i -= len(m.ExecuteCondition)
		copy(dAtA[i:], m.ExecuteCondition)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ExecuteCondition)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Callback) > 0 {
		i -= len(m.Callback)
		copy(dAtA[i:], m.Callback)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Callback)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Module) > 0 {
		i -= len(m.Module)
		copy(dAtA[i:], m.Module)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Module)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EventStatus != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EventStatus))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventType != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.EventType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EventType != 0 {
		n += 1 + sovGenesis(uint64(m.EventType))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EventStatus != 0 {
		n += 1 + sovGenesis(uint64(m.EventStatus))
	}
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Callback)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ExecuteCondition)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EmittedHeight != 0 {
		n += 1 + sovGenesis(uint64(m.EmittedHeight))
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventType", wireType)
			}
			m.EventType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventStatus", wireType)
			}
			m.EventStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EventStatus |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Callback", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Callback = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteCondition", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecuteCondition = append(m.ExecuteCondition[:0], dAtA[iNdEx:postIndex]...)
			if m.ExecuteCondition == nil {
				m.ExecuteCondition = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmittedHeight", wireType)
			}
			m.EmittedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmittedHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
