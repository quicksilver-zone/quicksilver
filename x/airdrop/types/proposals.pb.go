// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/airdrop/v1/proposals.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RegisterZoneDropProposal struct {
	Title        string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description  string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ZoneDrop     *ZoneDrop `protobuf:"bytes,3,opt,name=zone_drop,json=zoneDrop,proto3" json:"zone_drop,omitempty" yaml:"zone_drop"`
	ClaimRecords []byte    `protobuf:"bytes,4,opt,name=claim_records,json=claimRecords,proto3" json:"claim_records,omitempty" yaml:"claim_records"`
}

func (m *RegisterZoneDropProposal) Reset()      { *m = RegisterZoneDropProposal{} }
func (*RegisterZoneDropProposal) ProtoMessage() {}
func (*RegisterZoneDropProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ca18fdf9feef37, []int{0}
}
func (m *RegisterZoneDropProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterZoneDropProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterZoneDropProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterZoneDropProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterZoneDropProposal.Merge(m, src)
}
func (m *RegisterZoneDropProposal) XXX_Size() int {
	return m.Size()
}
func (m *RegisterZoneDropProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterZoneDropProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterZoneDropProposal proto.InternalMessageInfo

type MsgRegisterZoneDrop struct {
	Authority    string    `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	ZoneDrop     *ZoneDrop `protobuf:"bytes,2,opt,name=zone_drop,json=zoneDrop,proto3" json:"zone_drop,omitempty" yaml:"zone_drop"`
	ClaimRecords []byte    `protobuf:"bytes,3,opt,name=claim_records,json=claimRecords,proto3" json:"claim_records,omitempty" yaml:"claim_records"`
}

func (m *MsgRegisterZoneDrop) Reset()         { *m = MsgRegisterZoneDrop{} }
func (m *MsgRegisterZoneDrop) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterZoneDrop) ProtoMessage()    {}
func (*MsgRegisterZoneDrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ca18fdf9feef37, []int{1}
}
func (m *MsgRegisterZoneDrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterZoneDrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterZoneDrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterZoneDrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterZoneDrop.Merge(m, src)
}
func (m *MsgRegisterZoneDrop) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterZoneDrop) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterZoneDrop.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterZoneDrop proto.InternalMessageInfo

// MsgRegisterZoneDropResponse defines the MsgRegisterZoneDrop response type.
type MsgRegisterZoneDropResponse struct {
}

func (m *MsgRegisterZoneDropResponse) Reset()         { *m = MsgRegisterZoneDropResponse{} }
func (m *MsgRegisterZoneDropResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterZoneDropResponse) ProtoMessage()    {}
func (*MsgRegisterZoneDropResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d5ca18fdf9feef37, []int{2}
}
func (m *MsgRegisterZoneDropResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterZoneDropResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterZoneDropResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterZoneDropResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterZoneDropResponse.Merge(m, src)
}
func (m *MsgRegisterZoneDropResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterZoneDropResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterZoneDropResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterZoneDropResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterZoneDropProposal)(nil), "quicksilver.airdrop.v1.RegisterZoneDropProposal")
	proto.RegisterType((*MsgRegisterZoneDrop)(nil), "quicksilver.airdrop.v1.MsgRegisterZoneDrop")
	proto.RegisterType((*MsgRegisterZoneDropResponse)(nil), "quicksilver.airdrop.v1.MsgRegisterZoneDropResponse")
}

func init() {
	proto.RegisterFile("quicksilver/airdrop/v1/proposals.proto", fileDescriptor_d5ca18fdf9feef37)
}

var fileDescriptor_d5ca18fdf9feef37 = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x6b, 0xd4, 0x40,
	0x14, 0xc6, 0x33, 0xad, 0x8a, 0x3b, 0x5d, 0x41, 0x62, 0xa8, 0xb1, 0x62, 0x12, 0x82, 0xc8, 0x22,
	0x34, 0xa1, 0x0a, 0x3d, 0x14, 0x3c, 0xb8, 0x78, 0x15, 0x4a, 0x7a, 0xeb, 0x65, 0xc9, 0x26, 0xc3,
	0x74, 0x30, 0xc9, 0x1b, 0xe7, 0x4d, 0x16, 0xd3, 0xa3, 0xa7, 0x1e, 0x3d, 0x7a, 0xdc, 0x3f, 0xc1,
	0x83, 0x7f, 0x84, 0xc7, 0xe2, 0xc9, 0x53, 0x91, 0xdd, 0x83, 0x9e, 0x8b, 0x17, 0x6f, 0xb2, 0x99,
	0xb4, 0xdd, 0x4a, 0x3d, 0x78, 0xe8, 0x2d, 0x5f, 0xbe, 0xef, 0xf1, 0xbd, 0xdf, 0xf0, 0xe8, 0x93,
	0xb7, 0xb5, 0xc8, 0xde, 0xa0, 0x28, 0x26, 0x4c, 0xc5, 0xa9, 0x50, 0xb9, 0x02, 0x19, 0x4f, 0xb6,
	0x62, 0xa9, 0x40, 0x02, 0xa6, 0x05, 0x46, 0x52, 0x81, 0x06, 0x7b, 0x7d, 0x29, 0x17, 0x75, 0xb9,
	0x68, 0xb2, 0xb5, 0xe1, 0x70, 0xe0, 0xd0, 0x46, 0xe2, 0xc5, 0x97, 0x49, 0x6f, 0x3c, 0xc8, 0x00,
	0x4b, 0xc0, 0x91, 0x31, 0x8c, 0xe8, 0xac, 0xfb, 0x46, 0xc5, 0x25, 0xf2, 0x45, 0x4f, 0x89, 0xbc,
	0x33, 0x1e, 0xff, 0x63, 0x93, 0xb3, 0xb2, 0x36, 0x15, 0xfe, 0x22, 0xd4, 0x4d, 0x18, 0x17, 0xa8,
	0x99, 0xda, 0x87, 0x8a, 0xbd, 0x52, 0x20, 0x77, 0xbb, 0x5d, 0x6d, 0x87, 0xde, 0xd4, 0x42, 0x17,
	0xcc, 0x25, 0x01, 0x19, 0xf4, 0x12, 0x23, 0xec, 0x80, 0xae, 0xe5, 0x0c, 0x33, 0x25, 0xa4, 0x16,
	0x50, 0xb9, 0x2b, 0xad, 0xb7, 0xfc, 0xcb, 0xde, 0xa3, 0xbd, 0x43, 0xa8, 0xd8, 0x68, 0xd1, 0xe3,
	0xae, 0x06, 0x64, 0xb0, 0xf6, 0x2c, 0x88, 0xae, 0x06, 0x8e, 0xce, 0x4a, 0x87, 0xce, 0xe9, 0x89,
	0x7f, 0xb7, 0x49, 0xcb, 0x62, 0x27, 0x3c, 0x1f, 0x0e, 0x93, 0xdb, 0x87, 0x9d, 0x6f, 0xbf, 0xa0,
	0x77, 0xb2, 0x22, 0x15, 0xe5, 0x48, 0xb1, 0x0c, 0x54, 0x8e, 0xee, 0x8d, 0x80, 0x0c, 0xfa, 0x43,
	0xf7, 0xf4, 0xc4, 0x77, 0xcc, 0xd8, 0x25, 0x3b, 0x4c, 0xfa, 0xad, 0x4e, 0x8c, 0xdc, 0xe9, 0x1f,
	0x4d, 0x7d, 0xeb, 0xe3, 0xd4, 0xb7, 0x7e, 0x4e, 0x7d, 0x2b, 0xfc, 0x4d, 0xe8, 0xbd, 0xd7, 0xc8,
	0xff, 0x26, 0xb7, 0xb7, 0x69, 0x2f, 0xad, 0xf5, 0x01, 0x28, 0xa1, 0x1b, 0x43, 0x3d, 0x74, 0xbf,
	0x7e, 0xde, 0x74, 0xba, 0x27, 0x7f, 0x99, 0xe7, 0x8a, 0x21, 0xee, 0x69, 0x25, 0x2a, 0x9e, 0x5c,
	0x44, 0x2f, 0x13, 0xaf, 0x5c, 0x17, 0xf1, 0xea, 0x7f, 0x11, 0xaf, 0x1f, 0x75, 0xb4, 0xef, 0x7f,
	0x7c, 0x7a, 0x7a, 0xb1, 0x6b, 0xf8, 0x88, 0x3e, 0xbc, 0x02, 0x3d, 0x61, 0x28, 0xa1, 0x42, 0x36,
	0xdc, 0xfd, 0x32, 0xf3, 0xc8, 0xf1, 0xcc, 0x23, 0xdf, 0x67, 0x1e, 0xf9, 0x30, 0xf7, 0xac, 0xe3,
	0xb9, 0x67, 0x7d, 0x9b, 0x7b, 0xd6, 0xfe, 0x36, 0x17, 0xfa, 0xa0, 0x1e, 0x47, 0x19, 0x94, 0xb1,
	0xa8, 0x38, 0xab, 0x6a, 0xa1, 0x9b, 0xcd, 0x71, 0x2d, 0x8a, 0x3c, 0x5e, 0x3e, 0xb6, 0x77, 0xe7,
	0xe7, 0xa6, 0x1b, 0xc9, 0x70, 0x7c, 0xab, 0x3d, 0xb5, 0xe7, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x82, 0x61, 0xa6, 0x8c, 0x1c, 0x03, 0x00, 0x00,
}

func (m *RegisterZoneDropProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterZoneDropProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterZoneDropProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRecords) > 0 {
		i -= len(m.ClaimRecords)
		copy(dAtA[i:], m.ClaimRecords)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.ClaimRecords)))
		i--
		dAtA[i] = 0x22
	}
	if m.ZoneDrop != nil {
		{
			size, err := m.ZoneDrop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterZoneDrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterZoneDrop) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterZoneDrop) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimRecords) > 0 {
		i -= len(m.ClaimRecords)
		copy(dAtA[i:], m.ClaimRecords)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.ClaimRecords)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ZoneDrop != nil {
		{
			size, err := m.ZoneDrop.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposals(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintProposals(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterZoneDropResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterZoneDropResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterZoneDropResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintProposals(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposals(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterZoneDropProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.ZoneDrop != nil {
		l = m.ZoneDrop.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.ClaimRecords)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *MsgRegisterZoneDrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	if m.ZoneDrop != nil {
		l = m.ZoneDrop.Size()
		n += 1 + l + sovProposals(uint64(l))
	}
	l = len(m.ClaimRecords)
	if l > 0 {
		n += 1 + l + sovProposals(uint64(l))
	}
	return n
}

func (m *MsgRegisterZoneDropResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProposals(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposals(x uint64) (n int) {
	return sovProposals(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterZoneDropProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterZoneDropProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterZoneDropProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneDrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZoneDrop == nil {
				m.ZoneDrop = &ZoneDrop{}
			}
			if err := m.ZoneDrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecords", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecords = append(m.ClaimRecords[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimRecords == nil {
				m.ClaimRecords = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterZoneDrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterZoneDrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterZoneDrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZoneDrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ZoneDrop == nil {
				m.ZoneDrop = &ZoneDrop{}
			}
			if err := m.ZoneDrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimRecords", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposals
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposals
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimRecords = append(m.ClaimRecords[:0], dAtA[iNdEx:postIndex]...)
			if m.ClaimRecords == nil {
				m.ClaimRecords = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterZoneDropResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterZoneDropResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterZoneDropResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProposals(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposals
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposals(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposals
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposals
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposals
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposals
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposals
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposals        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposals          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposals = fmt.Errorf("proto: unexpected end of group")
)
