// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/lsmstaking/v1beta1/types.proto

package lsmtypes

import (
	fmt "fmt"
	_ "github.com/cometbft/cometbft/abci/types"
	_ "github.com/cometbft/cometbft/proto/tendermint/types"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	types1 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// consensus_pubkey is the consensus public key of the validator, as a Protobuf Any.
	ConsensusPubkey *types.Any `protobuf:"bytes,2,opt,name=consensus_pubkey,json=consensusPubkey,proto3" json:"consensus_pubkey,omitempty"`
	// jailed defined whether the validator has been jailed from bonded status or not.
	Jailed bool `protobuf:"varint,3,opt,name=jailed,proto3" json:"jailed,omitempty"`
	// status is the validator status (bonded/unbonding/unbonded).
	Status types1.BondStatus `protobuf:"varint,4,opt,name=status,proto3,enum=cosmos.staking.v1beta1.BondStatus" json:"status,omitempty"`
	// tokens define the delegated tokens (incl. self-delegation).
	Tokens github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=tokens,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"tokens"`
	// delegator_shares defines total shares issued to a validator's delegators.
	DelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares"`
	// description defines the description terms for the validator.
	Description types1.Description `protobuf:"bytes,7,opt,name=description,proto3" json:"description"`
	// unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
	UnbondingHeight int64 `protobuf:"varint,8,opt,name=unbonding_height,json=unbondingHeight,proto3" json:"unbonding_height,omitempty"`
	// unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
	UnbondingTime time.Time `protobuf:"bytes,9,opt,name=unbonding_time,json=unbondingTime,proto3,stdtime" json:"unbonding_time"`
	// commission defines the commission parameters.
	Commission types1.Commission `protobuf:"bytes,10,opt,name=commission,proto3" json:"commission"`
	// Deprecated: This field has been deprecated with LSM in favor of the validator bond
	MinSelfDelegation github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,11,opt,name=min_self_delegation,json=minSelfDelegation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_self_delegation"` // Deprecated: Do not use.
	// strictly positive if this validator's unbonding has been stopped by external modules
	UnbondingOnHoldRefCount int64 `protobuf:"varint,12,opt,name=unbonding_on_hold_ref_count,json=unbondingOnHoldRefCount,proto3" json:"unbonding_on_hold_ref_count,omitempty"`
	// list of unbonding ids, each uniquely identifing an unbonding of this validator
	UnbondingIds []uint64 `protobuf:"varint,13,rep,packed,name=unbonding_ids,json=unbondingIds,proto3" json:"unbonding_ids,omitempty"`
	// Number of shares self bonded from the validator
	ValidatorBondShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,14,opt,name=validator_bond_shares,json=validatorBondShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_bond_shares" yaml:"validator_bond_shares"`
	// Number of shares either tokenized or owned by a liquid staking provider
	LiquidShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,15,opt,name=liquid_shares,json=liquidShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquid_shares" yaml:"liquid_shares"`
}

func (m *Validator) Reset()      { *m = Validator{} }
func (*Validator) ProtoMessage() {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e36b7c3880ee9bfa, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Validator)(nil), "cosmos.lsmstaking.v1beta1.Validator")
}

func init() {
	proto.RegisterFile("cosmos/lsmstaking/v1beta1/types.proto", fileDescriptor_e36b7c3880ee9bfa)
}

var fileDescriptor_e36b7c3880ee9bfa = []byte{
	// 803 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x3f, 0x6f, 0xfb, 0x44,
	0x18, 0xc7, 0x6d, 0x5a, 0x42, 0x73, 0x6d, 0x9a, 0xd4, 0x0d, 0x60, 0xd2, 0x2a, 0x8e, 0x52, 0x40,
	0x01, 0x29, 0xb6, 0x5a, 0xb6, 0xaa, 0x42, 0x6a, 0x1a, 0xa1, 0x56, 0xfc, 0x8b, 0x9c, 0x0a, 0x09,
	0x16, 0xcb, 0x7f, 0x2e, 0xce, 0x11, 0xfb, 0x2e, 0xf5, 0x9d, 0x2b, 0xc2, 0x84, 0x98, 0x18, 0x3b,
	0x32, 0x76, 0x64, 0x44, 0xa2, 0x2f, 0xa2, 0x62, 0xaa, 0x3a, 0x21, 0x84, 0x0a, 0x6a, 0x07, 0x98,
	0x79, 0x05, 0xc8, 0xe7, 0xb3, 0xe3, 0x86, 0x5f, 0x87, 0xea, 0xb7, 0x24, 0xbe, 0xe7, 0xf9, 0xde,
	0xe7, 0xeb, 0xe7, 0xb9, 0xe7, 0x64, 0xf0, 0x8e, 0x4b, 0x68, 0x48, 0xa8, 0x11, 0xd0, 0x90, 0x32,
	0x7b, 0x82, 0xb0, 0x6f, 0x9c, 0xef, 0x3a, 0x90, 0xd9, 0xbb, 0x06, 0x9b, 0x4d, 0x21, 0xd5, 0xa7,
	0x11, 0x61, 0x44, 0x79, 0x2b, 0x95, 0xe9, 0x73, 0x99, 0x2e, 0x64, 0x8d, 0x0d, 0x3b, 0x44, 0x98,
	0x18, 0xfc, 0x37, 0x55, 0x37, 0x9a, 0x02, 0xea, 0xd8, 0x14, 0xe6, 0x38, 0x97, 0x20, 0x2c, 0xf2,
	0x82, 0x66, 0xf1, 0x95, 0x21, 0xd0, 0x69, 0xaa, 0xee, 0x13, 0x9f, 0xa4, 0xf1, 0xe4, 0x29, 0xdb,
	0xe0, 0x13, 0xe2, 0x07, 0xd0, 0xe0, 0x2b, 0x27, 0x1e, 0x19, 0x36, 0x9e, 0x65, 0x5e, 0x8b, 0x29,
	0x2f, 0x8e, 0x6c, 0x86, 0x48, 0xe6, 0xa5, 0x2d, 0xe6, 0x19, 0x0a, 0x21, 0x65, 0x76, 0x38, 0x15,
	0x82, 0x2d, 0x06, 0xb1, 0x07, 0xa3, 0x10, 0x61, 0x66, 0xd8, 0x8e, 0x8b, 0x8a, 0x75, 0x37, 0xb6,
	0x0b, 0x49, 0x1e, 0x7f, 0x94, 0x7d, 0x5b, 0xd4, 0xb9, 0xd8, 0xb9, 0xac, 0x45, 0x5c, 0xd5, 0xfe,
	0xa5, 0x0c, 0xca, 0x5f, 0xd8, 0x01, 0xf2, 0x6c, 0x46, 0x22, 0xe5, 0x08, 0xd4, 0xc8, 0x14, 0x46,
	0xc9, 0xb3, 0x65, 0x7b, 0x5e, 0x04, 0x29, 0x55, 0xe5, 0x96, 0xdc, 0x29, 0xf7, 0xd4, 0xdb, 0xab,
	0x6e, 0x5d, 0x34, 0xe3, 0x30, 0xcd, 0x0c, 0x59, 0x84, 0xb0, 0x6f, 0x56, 0xb3, 0x1d, 0x22, 0xac,
	0x7c, 0x09, 0x6a, 0x2e, 0xc1, 0x14, 0x62, 0x1a, 0x53, 0x6b, 0x1a, 0x3b, 0x13, 0x38, 0x53, 0x5f,
	0x69, 0xc9, 0x9d, 0xd5, 0xbd, 0xba, 0x9e, 0xd6, 0xab, 0x67, 0xf5, 0xea, 0x87, 0x78, 0xd6, 0x53,
	0x7f, 0x9d, 0xa3, 0xdd, 0x68, 0x36, 0x65, 0x44, 0x1f, 0xc4, 0xce, 0xc7, 0x70, 0x66, 0x56, 0x73,
	0xce, 0x80, 0x63, 0x94, 0x37, 0x40, 0xe9, 0x6b, 0x1b, 0x05, 0xd0, 0x53, 0x97, 0x5a, 0x72, 0x67,
	0xc5, 0x14, 0x2b, 0x65, 0x1f, 0x94, 0x28, 0xb3, 0x59, 0x4c, 0xd5, 0xe5, 0x96, 0xdc, 0x59, 0xdf,
	0x6b, 0xeb, 0x82, 0xb7, 0x30, 0x0f, 0x7a, 0x8f, 0x60, 0x6f, 0xc8, 0x95, 0xa6, 0xd8, 0xa1, 0x9c,
	0x82, 0x12, 0x23, 0x13, 0x88, 0xa9, 0xfa, 0x2a, 0xaf, 0xf4, 0xe0, 0xfa, 0x4e, 0x93, 0x7e, 0xbf,
	0xd3, 0xde, 0xf5, 0x11, 0x1b, 0xc7, 0x8e, 0xee, 0x92, 0x50, 0x4c, 0x81, 0xf8, 0xeb, 0x52, 0x6f,
	0x22, 0x3a, 0x7d, 0x82, 0xd9, 0xed, 0x55, 0x17, 0x08, 0xb3, 0x13, 0xcc, 0x4c, 0xc1, 0x52, 0x7c,
	0x50, 0xf3, 0x60, 0x00, 0x7d, 0xde, 0x4a, 0x3a, 0xb6, 0x23, 0x48, 0xd5, 0xd2, 0xb3, 0xf9, 0x7d,
	0xe8, 0x16, 0xf8, 0x7d, 0xe8, 0x9a, 0xd5, 0x9c, 0x3a, 0xe4, 0x50, 0x65, 0x00, 0x56, 0x3d, 0x48,
	0xdd, 0x08, 0x4d, 0x93, 0xb9, 0x52, 0x5f, 0xe3, 0x8d, 0xde, 0x79, 0xaa, 0xfe, 0xfe, 0x5c, 0xda,
	0x2b, 0x27, 0x2f, 0xf2, 0xd3, 0xdf, 0x3f, 0xbf, 0x2f, 0x9b, 0x45, 0x84, 0xf2, 0x1e, 0xa8, 0xc5,
	0xd8, 0x21, 0xd8, 0x43, 0xd8, 0xb7, 0xc6, 0x10, 0xf9, 0x63, 0xa6, 0xae, 0xb4, 0xe4, 0xce, 0x92,
	0x59, 0xcd, 0xe3, 0xc7, 0x3c, 0xac, 0x0c, 0xc0, 0xfa, 0x5c, 0x9a, 0xcc, 0xae, 0x5a, 0xe6, 0xfe,
	0x8d, 0xff, 0x1d, 0xf4, 0x69, 0x36, 0xd8, 0xbd, 0x4a, 0x62, 0x7b, 0xf1, 0xa7, 0x26, 0xa7, 0xd6,
	0x95, 0x1c, 0x90, 0x48, 0x94, 0x4f, 0x01, 0x70, 0x49, 0x18, 0x22, 0x4a, 0x93, 0x6a, 0x00, 0xa7,
	0x3d, 0x79, 0x9a, 0x47, 0xb9, 0xb2, 0x58, 0x4c, 0x01, 0xa0, 0x60, 0xb0, 0x19, 0x22, 0x6c, 0x51,
	0x18, 0x8c, 0x2c, 0xd1, 0xb9, 0x84, 0xbb, 0xca, 0x4f, 0xe2, 0xc3, 0x97, 0x39, 0x69, 0x55, 0x36,
	0x37, 0x42, 0x84, 0x87, 0x30, 0x18, 0xf5, 0x73, 0xb0, 0x72, 0x00, 0xb6, 0xe6, 0x0d, 0x21, 0xd8,
	0x1a, 0x93, 0xc0, 0xb3, 0x22, 0x38, 0xb2, 0x5c, 0x12, 0x63, 0xa6, 0xae, 0xf1, 0x36, 0xbe, 0x99,
	0x4b, 0x3e, 0xc7, 0xc7, 0x24, 0xf0, 0x4c, 0x38, 0x3a, 0x4a, 0xd2, 0xca, 0x0e, 0x98, 0x77, 0xc3,
	0x42, 0x1e, 0x55, 0x2b, 0xad, 0xa5, 0xce, 0xb2, 0xb9, 0x96, 0x07, 0x4f, 0x3c, 0xaa, 0x7c, 0x2f,
	0x83, 0xd7, 0xcf, 0xb3, 0x1b, 0x6b, 0x25, 0x89, 0x6c, 0xbe, 0xd6, 0x79, 0x55, 0x9f, 0x3d, 0x6f,
	0xbe, 0xfe, 0xbd, 0xd3, 0xb6, 0x67, 0x76, 0x18, 0xec, 0xb7, 0x5f, 0x08, 0x6d, 0x9b, 0x9b, 0x79,
	0x9c, 0x5f, 0x9e, 0x74, 0xea, 0x26, 0xa0, 0x12, 0xa0, 0xb3, 0x18, 0xe5, 0xde, 0x55, 0xee, 0xfd,
	0xd1, 0xb3, 0xbd, 0xeb, 0xa9, 0xf7, 0x23, 0x58, 0xdb, 0x5c, 0x4b, 0xd7, 0xa9, 0xd9, 0x7e, 0xed,
	0x87, 0x4b, 0x4d, 0xfa, 0xf1, 0x52, 0x93, 0xfe, 0xb9, 0xd4, 0xa4, 0xef, 0xfe, 0x68, 0x49, 0xbd,
	0x4f, 0xae, 0xef, 0x9b, 0xf2, 0xcd, 0x7d, 0x53, 0xfe, 0xeb, 0xbe, 0x29, 0x5f, 0x3c, 0x34, 0xa5,
	0x9b, 0x87, 0xa6, 0xf4, 0xdb, 0x43, 0x53, 0xfa, 0x6a, 0xaf, 0xe0, 0x7c, 0x16, 0x23, 0x77, 0x42,
	0x51, 0x70, 0x0e, 0xa3, 0xee, 0xb7, 0x04, 0xc3, 0x62, 0xc0, 0xf8, 0x26, 0xf9, 0xaa, 0xf0, 0x37,
	0x71, 0x4a, 0x7c, 0x4a, 0x3f, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x08, 0xee, 0xea, 0x6f,
	0x06, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidShares.Size()
		i -= size
		if _, err := m.LiquidShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	{
		size := m.ValidatorBondShares.Size()
		i -= size
		if _, err := m.ValidatorBondShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.UnbondingIds) > 0 {
		dAtA2 := make([]byte, len(m.UnbondingIds)*10)
		var j1 int
		for _, num := range m.UnbondingIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTypes(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x6a
	}
	if m.UnbondingOnHoldRefCount != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnbondingOnHoldRefCount))
		i--
		dAtA[i] = 0x60
	}
	{
		size := m.MinSelfDelegation.Size()
		i -= size
		if _, err := m.MinSelfDelegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnbondingTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x4a
	if m.UnbondingHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.UnbondingHeight))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Description.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Tokens.Size()
		i -= size
		if _, err := m.Tokens.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Status != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Jailed {
		i--
		if m.Jailed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusPubkey != nil {
		{
			size, err := m.ConsensusPubkey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ConsensusPubkey != nil {
		l = m.ConsensusPubkey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Jailed {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovTypes(uint64(m.Status))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.Description.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.UnbondingHeight != 0 {
		n += 1 + sovTypes(uint64(m.UnbondingHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondingTime)
	n += 1 + l + sovTypes(uint64(l))
	l = m.Commission.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.MinSelfDelegation.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.UnbondingOnHoldRefCount != 0 {
		n += 1 + sovTypes(uint64(m.UnbondingOnHoldRefCount))
	}
	if len(m.UnbondingIds) > 0 {
		l = 0
		for _, e := range m.UnbondingIds {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	l = m.ValidatorBondShares.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = m.LiquidShares.Size()
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusPubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusPubkey == nil {
				m.ConsensusPubkey = &types.Any{}
			}
			if err := m.ConsensusPubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jailed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Jailed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types1.BondStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Description.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingHeight", wireType)
			}
			m.UnbondingHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnbondingTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSelfDelegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinSelfDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOnHoldRefCount", wireType)
			}
			m.UnbondingOnHoldRefCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingOnHoldRefCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnbondingIds = append(m.UnbondingIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnbondingIds) == 0 {
					m.UnbondingIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnbondingIds = append(m.UnbondingIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingIds", wireType)
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorBondShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorBondShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
