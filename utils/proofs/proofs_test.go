package proofs_test

import (
	"encoding/hex"
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	codectypes "github.com/cosmos/cosmos-sdk/codec/types"

	celestiatypes "github.com/quicksilver-zone/quicksilver/third-party-chains/celestia-types/types"
	"github.com/quicksilver-zone/quicksilver/utils/proofs"
)

func TestCelestiaProof(t *testing.T) {
	proofJsons := make([][]byte, 3)
	proofJsons[0] = []byte(`{"data":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAeRITCg0KBHV0aWESBTE3NTc5ELegCBpARe7yv9MRBaY5kI46eb/t+068GmUrI40vsE3cg69Whpt95gDSkYeObyMksfTt7S4fjLKsr9xRMSl8x0nyDQJlSa8ECoMDCoADCikvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlchLSAgoIdHJhbnNmZXISCmNoYW5uZWwtMjYaDwoEdXRpYRIHODAwMDAwMCIvY2VsZXN0aWExY3R0N3MwdW5zcW45M2ttYWhjaHN3a2YzYXQ3eG02NW5maDg4MHEqQm5ldXRyb24xa3lnY3hham51MmV1cXd0YzhoYWRxZXI4NHU5a2NxbXVuNzB4eGVxMDk2aDVlc3FxZnM5cW11czVndDIAOID686OM0euCGEKnAXsid2FzbSI6eyJjb250cmFjdCI6Im5ldXRyb24xa3lnY3hham51MmV1cXd0YzhoYWRxZXI4NHU5a2NxbXVuNzB4eGVxMDk2aDVlc3FxZnM5cW11czVndCIsIm1zZyI6eyJib25kIjp7InJlY2VpdmVyIjoibmV1dHJvbjFjdHQ3czB1bnNxbjkza21haGNoc3drZjNhdDd4bTY1bnV6bDQwMiJ9fX0=","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAH0SZQpOCkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohAuK/uFcHisZtyIg0vVJHvYnt8CKfZmOMf70La8RGLAzGEgQKAgh/EhMKDQoEdXRpYRIFMTc1NzkQt6AIGkAx/8Yqb6LAH4G2ptQhZNRoiSE4Z0gsG4RVbOi14rAr5xLiLDjQs7dmUx9wVv6sEGPT5nnA3dujm/6deNMxHc6eAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="],"share_proofs":[{"start":1,"end":3,"nodes":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWTZJ3GyzZXl9M0TfcKacLneSSGSj7hTxljOKPnAvgnU","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABHyHUODcqdL2AXcykBDlMRfkutpcAJtuEhbOCtglEBNO","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDxIObVTycjpBHW1We8DTrPiG1G3PyvOhf1ppYfPYoN3","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBGLP5hUISAioXduqJnP95S7E9nQfPhwDH3XfAC51jqT","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZWNsaXBzZVGq+kMtasjipJ9t51/qsZD0AEhXiuEghrae0tV7C5X8","/////////////////////////////////////////////////////////////////////////////xPUwQmxNjpjtgmlP4mjW468p4IfGweRKHiQeLQBhi05"]}],"namespace_id":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ==","row_proof":{"row_roots":["00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000065636C697073655798EB7704EFFB189E1F3FA10E7CB7CFF35FACB983AFFE2481401094883510C6"],"proofs":[{"total":128,"index":0,"leaf_hash":"KicQWSx3W7rXFANDM81TghbrSQuCp95dUVr2JPm8qL4=","aunts":["RS9hJVjLf5lBVJ85WnMUcU50fed12a5DUulUVrfp9Ds=","U5449RhgBhHxpbYYct97/bgg+Gu2H8YZgFgC/C8ss1I=","fzd+vdjaf1j8ok7nEWPIaQfPER/hXB/IxvDMpqTiMXo=","cI4iPszXBa/Ajh6uDOoY4luSzOl22Vkodp6NoEx2ueU=","K/yH2ZDYNE9u/UT8sJtGuH+akiMNQTKUUu/uhlbGdgo=","JqJdUPpzaNnDwdwxo8aGIY8NV+dcSQzCBKGQkx/bqJI=","SZsPY2UEbIBRklLcRr4OBkIujOy43CwTiK9jhYoJgMY="]}],"start_row":0,"end_row":0},"namespace_version":0}`)
	proofJsons[1] = []byte(`{"data":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAeRITCg0KBHV0aWESBTE1NzU4EPuyBxpA0RMpf0iEspvCOjLXf9z0miDfg+aXLEGMTtLLmTOtc4dB6u+JfzOOR/J7BSAedc9QrcPJHOEBH2o9EVYKAJwkfNgCCqsBCqgBChwvY29zbW9zLmJhbmsudjFiZXRhMS5Nc2dTZW5kEocBCi9jZWxlc3RpYTE3djlrazM0a20zdzZoZGpzMnNuNXM1cWpkdTJ6cm0wbXRkZmZjbBJDY2VsZXN0aWExM2RqZ3M2YWNuNjc3bmx5Z21zbmM3bTVxc3QyczBsbGFhOHdkem1qajA0em4zNzg1ZWx6cXVsdm12dBoPCgR1dGlhEgcyMDAwMDAwEmYKUApGCh8vY29zbW9zLmNyeXB0by5zZWNwMjU2azEuUHViS2V5EiMKIQIbHdAUU4TwdJ1iD5pMsw2JbI/F2i4I0yek+2lL51KtPRIECgIIfxgGEhIKDAoEdXRpYRIEMjAxMRCrkQYaQHpHn0faCQeGueGH79QXO9fxwnSb4HUiJabA7zOm8je2CZZS7gYFSoQtiW9dtdIyQOVGa29b/MTVKiKvwbYUymkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA="],"share_proofs":[{"start":1,"end":2,"nodes":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYtiXPD05FgtaYkjPcts7w/IWMmADFK6WOAb7f6giLOS","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDAzybGjHtghXoBMZIFYYhTBpt7SabHubcT03uj+JJIs","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJ8EwDSHJQLxy/LYwLVK3oqeg/34iNUB45fNir7pgDsQ","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABLfyToK0IxLBH+vkSK5Ml63Vik/m+fHixAmssbFFNYpo","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAti5MKL4NjHaf6laJ2KAlO9k+Lr3CNEjTV5fvTLRLf67RvlYDgtmF","/////////////////////////////////////////////////////////////////////////////2RqMPXRtZbTYtV9RjZKKb3/ydhDU6zv0nks2Zdg2t8Y"]}],"namespace_id":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ==","row_proof":{"row_roots":["000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000B62E4C28BE0D8CD8360F5FBBD165E851A769FAC39C825174AF9C207A18C07B2D681F5587D0B496"],"proofs":[{"total":128,"index":0,"leaf_hash":"UFx9aTUY9U+tsHY9G8nEjpFbaQd26QdgCEMeHudccPo=","aunts":["iyLPHyUJGGTeJhbAsnn1YjZT6q+l0yswMGUtJ20lqlk=","1w60J6RsmAmPr3NOFCUZuMkQAIOiwkycyFfsqUiZg08=","qNgeEw5MvZAk4OvO8qKFJSKio9CXGHGGa/OUz8P0IAU=","DWVfvxYcmwi2aYcaxSS6yEJB6cSQaFphALA99rNnbzg=","K/yH2ZDYNE9u/UT8sJtGuH+akiMNQTKUUu/uhlbGdgo=","p5T2Es3zGhencqhK5jUjYg4R8AUo/o6/HEWVjad4XRU=","o4gPH9U/F7+1pJ3dE0quQJZ9bZOvA2cW5+mqBYuyev0="]}],"start_row":0,"end_row":0},"namespace_version":0}`)
	proofJsons[2] = []byte(`{"data":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAApxQAAACbYAgqrAQqoAQocL2Nvc21vcy5iYW5rLnYxYmV0YTEuTXNnU2VuZBKHAQovY2VsZXN0aWExN3Y5a2szNGttM3c2aGRqczJzbjVzNXFqZHUyenJtMG10ZGZmY2wSQ2NlbGVzdGlhMTNkamdzNmFjbjY3N25seWdtc25jN201cXN0MnMwbGxhYTh3ZHptamowNHpuMzc4NWVsenF1bHZtdnQaDwoEdXRpYRIHMjUwMDAwMBJmClAKRgofL2Nvc21vcy5jcnlwdG8uc2VjcDI1NmsxLlB1YktleRIjCiECGx3QFFOE8HSdYg+aTLMNiWyPxdouCNMnpPtpS+dSrT0SBAoCCH8YBRISCgwKBHV0aWESBDIwMTMQgZIGGkDZvGg9sqQ31KNVZVD1i0zMDNrTQLJySo17Iy0TeuGTUxHKyjdofdGYFyECPltPPPxxJDB1ZYDpXpxrn7nW313b6VAKu08K/z0KIy9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBkYXRlQ2xpZW50Etc9ChEwNy10ZW5kZXJtaW50LTEyMBKQPQomL2liYy5saWdodGNsaWVudHMudGVuZGVybWludC52MS5IZWFkZXIS5TwKjQwKjwMKAggLEgZwaW8="],"share_proofs":[{"end":1,"nodes":["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATXEnDqvSpSFmjdFKbIsqiU2dXKCsQZXiiN/2H4pEssb","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcrg8XU5DH8/McrJHLtoZ1FEbB4luqXPSLbZH4RN9Tq1","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVXee+73kJ1PDWUlNjgJ3pfoHZmT654cuawwWQQ7gD7T","AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/Nc8CWQp7FqB6nCFfC0tQctOK73iGytjFVTFOBQOwg","/////////////////////////////////////////////////////////////////////////////+e1dfeFI69cShPsjKsDkgiu+Wgbrqse2hh/hYmTsUnM"]}],"namespace_id":"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ==","row_proof":{"row_roots":["0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000178EDF613730C228DF7F0408856FF3D09AE287271C55039F6BE9288FCD926DE6F"],"proofs":[{"total":64,"index":0,"leaf_hash":"DxfnbpIg064CFjMFRHp9fAXtaBmhmckyy4jHZrrdue4=","aunts":["yH6vbQ7kSmgzQ68zu5gJ3VIREt0eupRrJ+uhRbCqqeY=","0Zvihl7SngjRg3ZwkiHAW0fHT3GYkxNB6Px2G4nE2YQ=","QdhtqXkOp5P+CqMAvfkbIz4WbNnWhJRuUg5EEmgj7MM=","XrYp2/hKnre1eT0rZgEm6dGAh+MkNmKrn674GkrcWgU=","5x5zVh7MNo++Ywm80cUePp3gQ62JVXN8Zh333yrMJas=","0k90h2TJlVWGQ+IrHkBz65Tbap6T0s1WuYvZvpoSfB0="]}],"start_row":0,"end_row":0},"namespace_version":0}`)

	dataHashes := make([][]byte, 3)
	var err error
	dataHashes[0], err = hex.DecodeString("9E980399FC6D72497E0BA6EF50B98DB447F05D59C61D467B204726293980372D")
	require.NoError(t, err)
	dataHashes[1], err = hex.DecodeString("222C27F1B9AFD644E85B52758A0C1F34BB260EDAEF122AB61544D3018257B8F3")
	require.NoError(t, err)
	dataHashes[2], err = hex.DecodeString("12BCC10FD76E28C9A7CB7F5EF0C89AF81EF364C53586027C172E36BFB7CEB689")
	require.NoError(t, err)

	txHashes := make([]string, 3)
	txHashes[0] = "ECF0C4A552F3DC01761B41C808A0A625D3A4C0546878C1C6FA366B2B6E5ED1D6"
	txHashes[1] = "0EEF51D70F0C633AEDDFAD630E913DE60F6549F356E9BA82E99093DEFF4AED65"
	txHashes[2] = "4F7BC0C7C964A4B2FB37D7CF4FC4E2D8C6BCA624BCD4498191F2308AF04E4253"

	registry := codectypes.NewInterfaceRegistry()
	proofs.RegisterInterfaces(registry)

	for i, proofJSON := range proofJsons {
		proof := celestiatypes.ShareProof{}
		err := json.Unmarshal(proofJSON, &proof)
		require.NoError(t, err, "i", i)

		protoProof := proof.ToProto()
		p := proofs.CelestiaProof{}
		p.ShareProof = &protoProof

		require.NoError(t, err, "i", i)

		tx, err := p.Validate(dataHashes[i], txHashes[i])
		require.NoError(t, err, "i", i)
		require.NotNil(t, tx)
	}
}
