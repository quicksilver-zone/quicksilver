// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: quicksilver/proofs/proofs.proto

package proofs

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	proto_types "github.com/quicksilver-zone/quicksilver/third-party-chains/celestia-types/proto-types"
	_ "github.com/tendermint/tendermint/proto/tendermint/crypto"
	types "github.com/tendermint/tendermint/proto/tendermint/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CelestiaProof struct {
	ShareProof *proto_types.ShareProof `protobuf:"bytes,1,opt,name=share_proof,json=shareProof,proto3" json:"share_proof,omitempty"`
	Index      uint32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *CelestiaProof) Reset()         { *m = CelestiaProof{} }
func (m *CelestiaProof) String() string { return proto.CompactTextString(m) }
func (*CelestiaProof) ProtoMessage()    {}
func (*CelestiaProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d181ba68a033fae, []int{0}
}
func (m *CelestiaProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CelestiaProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CelestiaProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CelestiaProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CelestiaProof.Merge(m, src)
}
func (m *CelestiaProof) XXX_Size() int {
	return m.Size()
}
func (m *CelestiaProof) XXX_DiscardUnknown() {
	xxx_messageInfo_CelestiaProof.DiscardUnknown(m)
}

var xxx_messageInfo_CelestiaProof proto.InternalMessageInfo

func (m *CelestiaProof) GetShareProof() *proto_types.ShareProof {
	if m != nil {
		return m.ShareProof
	}
	return nil
}

func (m *CelestiaProof) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

type TendermintProof struct {
	TxProof *types.TxProof `protobuf:"bytes,1,opt,name=tx_proof,json=txProof,proto3" json:"tx_proof,omitempty"`
}

func (m *TendermintProof) Reset()         { *m = TendermintProof{} }
func (m *TendermintProof) String() string { return proto.CompactTextString(m) }
func (*TendermintProof) ProtoMessage()    {}
func (*TendermintProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d181ba68a033fae, []int{1}
}
func (m *TendermintProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TendermintProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TendermintProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TendermintProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TendermintProof.Merge(m, src)
}
func (m *TendermintProof) XXX_Size() int {
	return m.Size()
}
func (m *TendermintProof) XXX_DiscardUnknown() {
	xxx_messageInfo_TendermintProof.DiscardUnknown(m)
}

var xxx_messageInfo_TendermintProof proto.InternalMessageInfo

func (m *TendermintProof) GetTxProof() *types.TxProof {
	if m != nil {
		return m.TxProof
	}
	return nil
}

func init() {
	proto.RegisterType((*CelestiaProof)(nil), "quicksilver.proofs.v1.proof.CelestiaProof")
	proto.RegisterType((*TendermintProof)(nil), "quicksilver.proofs.v1.proof.TendermintProof")
}

func init() { proto.RegisterFile("quicksilver/proofs/proofs.proto", fileDescriptor_6d181ba68a033fae) }

var fileDescriptor_6d181ba68a033fae = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2f, 0x2c, 0xcd, 0x4c,
	0xce, 0x2e, 0xce, 0xcc, 0x29, 0x4b, 0x2d, 0xd2, 0x2f, 0x28, 0xca, 0xcf, 0x4f, 0x2b, 0x86, 0x52,
	0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0xd2, 0x48, 0x0a, 0xf4, 0xa0, 0x32, 0x65, 0x86, 0x10,
	0x96, 0x94, 0x48, 0x72, 0x6a, 0x4e, 0x6a, 0x71, 0x49, 0x66, 0x22, 0x44, 0x0f, 0x44, 0x8b, 0x94,
	0x6c, 0x49, 0x6a, 0x5e, 0x4a, 0x6a, 0x51, 0x6e, 0x66, 0x5e, 0x89, 0x7e, 0x72, 0x51, 0x65, 0x41,
	0x49, 0x3e, 0x8a, 0xb4, 0x0c, 0x92, 0x74, 0x49, 0x65, 0x41, 0x6a, 0x31, 0x84, 0x84, 0xc8, 0x2a,
	0x65, 0x71, 0xf1, 0x3a, 0x43, 0x0d, 0x0d, 0x00, 0x69, 0x12, 0x72, 0xe6, 0xe2, 0x2e, 0xce, 0x48,
	0x2c, 0x4a, 0x8d, 0x07, 0x9b, 0x21, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xa4, 0x07, 0xb3,
	0x59, 0x2f, 0x39, 0xbf, 0x28, 0x15, 0xee, 0x22, 0xbd, 0x60, 0x90, 0x52, 0xb0, 0xc6, 0x20, 0xae,
	0x62, 0x38, 0x5b, 0x48, 0x84, 0x8b, 0x35, 0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x37, 0x08, 0xc2, 0x51, 0x72, 0xe7, 0xe2, 0x0f, 0x81, 0xbb, 0x05, 0xa2, 0xd0, 0x84, 0x8b,
	0xa3, 0xa4, 0x02, 0xc5, 0x2a, 0x49, 0x3d, 0x84, 0x7b, 0xf5, 0x20, 0x2e, 0x0d, 0xa9, 0x80, 0xd8,
	0xc0, 0x5e, 0x02, 0x61, 0x38, 0xf9, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83,
	0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43,
	0x94, 0x49, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x52, 0x48, 0xea,
	0x56, 0xe5, 0xe7, 0xa5, 0x22, 0x0b, 0xe8, 0x97, 0x96, 0x64, 0xe6, 0xc0, 0x82, 0x3e, 0x89, 0x0d,
	0x1c, 0x16, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xd4, 0xb0, 0xcc, 0x9e, 0x01, 0x00,
	0x00,
}

func (m *CelestiaProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CelestiaProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CelestiaProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintProofs(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if m.ShareProof != nil {
		{
			size, err := m.ShareProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProofs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TendermintProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TendermintProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TendermintProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxProof != nil {
		{
			size, err := m.TxProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProofs(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProofs(dAtA []byte, offset int, v uint64) int {
	offset -= sovProofs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CelestiaProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShareProof != nil {
		l = m.ShareProof.Size()
		n += 1 + l + sovProofs(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovProofs(uint64(m.Index))
	}
	return n
}

func (m *TendermintProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxProof != nil {
		l = m.TxProof.Size()
		n += 1 + l + sovProofs(uint64(l))
	}
	return n
}

func sovProofs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProofs(x uint64) (n int) {
	return sovProofs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CelestiaProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CelestiaProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CelestiaProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShareProof == nil {
				m.ShareProof = &proto_types.ShareProof{}
			}
			if err := m.ShareProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TendermintProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TendermintProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TendermintProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProofs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProofs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxProof == nil {
				m.TxProof = &types.TxProof{}
			}
			if err := m.TxProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProofs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProofs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProofs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProofs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProofs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProofs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProofs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProofs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProofs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProofs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProofs = fmt.Errorf("proto: unexpected end of group")
)
