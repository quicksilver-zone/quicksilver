syntax = "proto3";
package quicksilver.participationrewards.v1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/participationrewards/types";

// DistributionProportions defines the proportions of minted QCK that is to be
// allocated as participation rewards.
message DistributionProportions {
  option (gogoproto.goproto_getters) = false;

  string validator_selection_allocation = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string holdings_allocation = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string lockup_allocation = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// Params holds parameters for the participationrewards module.
message Params {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  // distribution_proportions defines the proportions of the minted
  // participation rewards;
  DistributionProportions distribution_proportions = 1
      [ (gogoproto.nullable) = false ];
  bool claims_enabled = 2;
}

message KeyedProtocolData {
  string key = 1;
  ProtocolData protocol_data = 2;
}

// Protocol Data is an arbitrary data type held against a given zone for the
// determination of rewards.
message ProtocolData {
  string type = 1;
  bytes data = 2 [ (gogoproto.casttype) = "encoding/json.RawMessage" ];
}

enum ProtocolDataType {
  option (gogoproto.goproto_enum_prefix) = false;

  // Undefined action (per protobuf spec)
  ProtocolDataTypeUndefined = 0;
  ProtocolDataTypeConnection = 1;
  ProtocolDataTypeOsmosisParams = 2;
  ProtocolDataTypeLiquidToken = 3;
  ProtocolDataTypeOsmosisPool = 4;
  ProtocolDataTypeCrescentPool = 5;
  ProtocolDataTypeSifchainPool = 6;
  ProtocolDataTypeUmeeParams = 7;
  ProtocolDataTypeUmeeReserves = 8;
  ProtocolDataTypeUmeeInterestScalar = 9;
  ProtocolDataTypeUmeeTotalBorrows = 10;
  ProtocolDataTypeUmeeUTokenSupply = 11;
  ProtocolDataTypeUmeeLeverageModuleBalance = 12;
  ProtocolDataTypeCrescentParams = 13;
  ProtocolDataTypeCrescentReserveAddressBalance = 14;
  ProtocolDataTypeCrescentPoolCoinSupply = 15;
}