syntax = "proto3";
package quicksilver.interchainstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "quicksilver/interchainstaking/v1/genesis.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/interchainstaking/types";

// Query defines the gRPC querier service.
service Query {
  // ZoneInfos provides meta data on connected zones.
  rpc ZoneInfos(QueryZonesInfoRequest) returns (QueryZonesInfoResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones";
  }
  // DepositAccount provides data on the deposit address for a connected zone.
  rpc DepositAccount(QueryDepositAccountForChainRequest)
      returns (QueryDepositAccountForChainResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/deposit_address";
  }
  // DelegatorIntent provides data on the intent of the delegator for the given
  // zone.
  rpc DelegatorIntent(QueryDelegatorIntentRequest)
      returns (QueryDelegatorIntentResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/delegator_intent/"
        "{delegator_address}";
  }

  // Delegations provides data on the delegations for the given zone.
  rpc Delegations(QueryDelegationsRequest) returns (QueryDelegationsResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/delegations";
  }

  // DelegatorDelegations provides data on the delegations from a given
  // delegator for the given zone.
  rpc DelegatorDelegations(QueryDelegatorDelegationsRequest)
      returns (QueryDelegatorDelegationsResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/"
        "delegator_delegations/{delegator_address}";
  }

  // ValidatorDelegations provides data on the delegations to a given validator
  // for the given zone.
  rpc ValidatorDelegations(QueryValidatorDelegationsRequest)
      returns (QueryValidatorDelegationsResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/"
        "validator_delegations/{validator_address}";
  }

  // DelegationPlans provides data on the delegations to a given validator for
  // the given zone.
  rpc DelegationPlans(QueryDelegationPlansRequest)
      returns (QueryDelegationPlansResponse) {
    option (google.api.http).get =
        "/quicksilver/interchainstaking/v1/zones/{chain_id}/delegation_plans";
  }
}

message QueryZonesInfoRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryZonesInfoResponse {
  repeated Zone zones = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDepositAccountForChainRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
}

// QueryDepositAccountForChainResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainResponse {
  string deposit_account_address = 1
      [ (gogoproto.moretags) = "yaml:\"deposit_account_address\"" ];
}

message QueryDelegatorIntentRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  string delegator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message QueryDelegatorIntentResponse { DelegatorIntent intent = 1; }

message QueryDelegationsRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDelegationsResponse {
  repeated Delegation delegations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDelegatorDelegationsRequest {
  string delegator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string chain_id = 2 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryDelegatorDelegationsResponse {
  repeated Delegation delegations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryValidatorDelegationsRequest {
  string validator_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string chain_id = 2 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryValidatorDelegationsResponse {
  repeated Delegation delegations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDelegationPlansRequest {
  string chain_id = 1 [ (gogoproto.moretags) = "yaml:\"chain_id\"" ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDelegationPlansResponse {
  repeated DelegationPlan delegations = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
