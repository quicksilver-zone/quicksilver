syntax = "proto3";
package quicksilver.interchainstaking.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "quicksilver/claimsmanager/v1/claimsmanager.proto";
import "quicksilver/interchainstaking/v1/interchainstaking.proto";

option go_package = "github.com/quicksilver-zone/quicksilver/x/interchainstaking/types";

// Query defines the gRPC querier service.
service Query {
  // Zones provides meta data on connected zones.
  rpc Zones(QueryZonesRequest) returns (QueryZonesResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones";
  }

  // Zone provides meta data on a specific zone.
  rpc Zone(QueryZoneRequest) returns (QueryZoneResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zone/{chain_id}";
  }

  rpc ZoneValidators(QueryZoneValidatorsRequest) returns (QueryZoneValidatorsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/validators";
  }

  // DepositAccount provides data on the deposit address for a connected zone.
  rpc DepositAccount(QueryDepositAccountForChainRequest) returns (QueryDepositAccountForChainResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/deposit_address";
  }

  // DelegatorIntent provides data on the intent of the delegator for the given
  // zone.
  rpc DelegatorIntent(QueryDelegatorIntentRequest) returns (QueryDelegatorIntentResponse) {
    option (google.api.http).get =
      "/quicksilver/interchainstaking/v1/zones/{chain_id}/delegator_intent/"
      "{delegator_address}";
  }

  // DelegatorIntents provides data on the intent of the delegator for all zones
  rpc DelegatorIntents(QueryDelegatorIntentsRequest) returns (QueryDelegatorIntentsResponse) {
    option (google.api.http).get =
      "/quicksilver/interchainstaking/v1/delegator_intents/"
      "{delegator_address}";
  }

  // Delegations provides data on the delegations for the given zone.
  rpc Delegations(QueryDelegationsRequest) returns (QueryDelegationsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/delegations";
  }

  // Delegations provides data on the delegations for the given zone.
  rpc Receipts(QueryReceiptsRequest) returns (QueryReceiptsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/receipts";
  }

  rpc TxStatus(QueryTxStatusRequest) returns (QueryTxStatusResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/deposits/{tx_hash}";
  }

  // WithdrawalRecords provides data on the active withdrawals.
  rpc ZoneWithdrawalRecords(QueryWithdrawalRecordsRequest) returns (QueryWithdrawalRecordsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/withdrawal_records";
  }

  // WithdrawalRecords provides data on the active withdrawals.
  rpc UserZoneWithdrawalRecords(QueryWithdrawalRecordsRequest) returns (QueryWithdrawalRecordsResponse) {
    option (google.api.http).get =
      "/quicksilver/interchainstaking/v1/zones/{chain_id}/withdrawal_records/"
      "{delegator_address}";
  }

  // WithdrawalRecords provides data on the active withdrawals.
  rpc WithdrawalRecords(QueryWithdrawalRecordsRequest) returns (QueryWithdrawalRecordsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/withdrawal_records";
  }

  // WithdrawalRecords provides data on the active withdrawals.
  rpc UserWithdrawalRecords(QueryUserWithdrawalRecordsRequest) returns (QueryWithdrawalRecordsResponse) {
    option (google.api.http).get =
      "/quicksilver/interchainstaking/v1/users/"
      "{user_address}/withdrawal_records";
  }

  // UnbondingRecords provides data on the active unbondings.
  rpc UnbondingRecords(QueryUnbondingRecordsRequest) returns (QueryUnbondingRecordsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/zones/{chain_id}/unbonding_records";
  }

  // RedelegationRecords provides data on the active unbondings.
  rpc RedelegationRecords(QueryRedelegationRecordsRequest) returns (QueryRedelegationRecordsResponse) {
    option (google.api.http).get =
      "/quicksilver/interchainstaking/v1/zones/"
      "{chain_id}/redelegation_records";
  }

  // MappedAccounts provides data on the mapped accounts for a given user over
  // different host chains.
  rpc MappedAccounts(QueryMappedAccountsRequest) returns (QueryMappedAccountsResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/mapped_addresses/{address}";
  }

  // CLaimedPercentage provides data on the claimed percentage for a given zone
  rpc ClaimedPercentage(QueryClaimedPercentageRequest) returns (QueryClaimedPercentageResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/claimed_percentage/{chain_id}";
  }

  // ClaimedPercentageByClaimType provides data on the claimed percentage of a given claim type in a given zone
  rpc ClaimedPercentageByClaimType(QueryClaimedPercentageRequest) returns (QueryClaimedPercentageResponse) {
    option (google.api.http).get = "/quicksilver/interchainstaking/v1/claimed_percentage/{chain_id}/{claim_type}";
  }
}

message Statistics {
  string chain_id = 1;
  string deposited = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  int64 deposits = 3;
  int64 depositors = 4;
  string delegated = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string supply = 6 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string distance_to_target = 7;

  // Current number of tokens in the unbonding state.
  cosmos.base.v1beta1.Coin unbonding_amount = 8 [(gogoproto.nullable) = false];
  // Current number of tokens in the queued state.
  cosmos.base.v1beta1.Coin queued_amount = 9 [(gogoproto.nullable) = false];
  // Number of withdrawal records in the unbonding state.
  uint32 unbonding_count = 10;
  // Number of withdrawal records in the queued state.
  uint32 queued_count = 11;
  // Number of active unbonding records.
  uint32 unbond_record_count = 12;
}

message QueryZonesRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryZonesResponse {
  repeated Zone zones = 1 [(gogoproto.nullable) = false];
  repeated Statistics stats = 2;
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryZoneRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
}

message QueryZoneResponse {
  Zone zone = 1 [(gogoproto.nullable) = false];
  Statistics stats = 2;
}

message QueryZoneValidatorsRequest {
  string chain_id = 1;
  string status = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryZoneValidatorsResponse {
  repeated Validator validators = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDepositAccountForChainRequest is the request type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
}

// QueryDepositAccountForChainResponse the response type for the
// Query/InterchainAccountAddress RPC
message QueryDepositAccountForChainResponse {
  string deposit_account_address = 1 [(gogoproto.moretags) = "yaml:\"deposit_account_address\""];
}

message QueryDelegatorIntentRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  string delegator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message QueryDelegatorIntentResponse {
  DelegatorIntent intent = 1;
}

message QueryDelegatorIntentsRequest {
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message DelegatorIntentsResponse {
  string chain_id = 1;
  DelegatorIntent intent = 2;
}

message QueryDelegatorIntentsResponse {
  repeated DelegatorIntentsResponse intents = 1;
}

message QueryDelegationsRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDelegationsResponse {
  repeated Delegation delegations = 1 [(gogoproto.nullable) = false];
  string tvl = 2 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  cosmos.base.query.v1beta1.PageResponse pagination = 3;
}

message QueryReceiptsRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryReceiptsResponse {
  repeated Receipt receipts = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTxStatusRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  string tx_hash = 2;
}

message QueryTxStatusResponse {
  Receipt receipt = 1;
}

message QueryWithdrawalRecordsRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  string delegator_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 3;
}

message QueryWithdrawalRecordsResponse {
  repeated WithdrawalRecord withdrawals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryUserWithdrawalRecordsRequest {
  string user_address = 1 [(gogoproto.moretags) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryUnbondingRecordsRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryUnbondingRecordsResponse {
  repeated UnbondingRecord unbondings = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryRedelegationRecordsRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryRedelegationRecordsResponse {
  repeated RedelegationRecord redelegations = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryMappedAccountsRequest {
  string address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryMappedAccountsResponse {
  map<string, bytes> RemoteAddressMap = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryDenyListRequest {
  string chain_id = 1 [(gogoproto.moretags) = "yaml:\"chain_id\""];
}
message QueryDenyListResponse {
  repeated string validators = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryClaimedPercentageRequest {
  string chain_id = 1;
  quicksilver.claimsmanager.v1.ClaimType claim_type = 2;
}

message QueryClaimedPercentageResponse {
  string percentage = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
