syntax = "proto3";
package quicksilver.interchainstaking.v1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/interchainstaking/types";

message Zone {
  string connection_id = 1;
  string chain_id = 2;
  ICAAccount deposit_address = 3;
  ICAAccount withdrawal_address = 4;
  ICAAccount performance_address = 5;
  repeated ICAAccount delegation_addresses = 6;
  string account_prefix = 7;
  string local_denom = 8;
  string base_denom = 9;
  string redemption_rate = 10 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string last_redemption_rate = 11 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  repeated Validator validators = 12;
  map<string, ValidatorIntent> aggregate_intent = 13;
  bool multi_send = 14;
  bool liquidity_module = 15;
  uint32 withdrawal_waitgroup = 16;
  bytes ibc_next_validators_hash = 17;
  repeated cosmos.base.v1beta1.Coin validator_selection_allocation = 18 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin holdings_allocation = 19 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  int64 last_epoch_height = 20;
}

message ICAAccount {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // balance defines the different coins this balance holds.
  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin delegated_balance = 3 [
    (cosmos_proto.scalar) = "cosmos.Coin",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  string port_name = 4;
  string withdrawal_address = 5;
  uint32 balance_waitgroup = 6;
}

message WithdrawalRecord {
  string delegator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string recipient = 3 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin amount = 4 [
    (cosmos_proto.scalar) = "cosmos.Coin",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin burn_amount = 5 [
    (cosmos_proto.scalar) = "cosmos.Coin",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  string txhash = 6;
  int32 status = 7;
}

message TransferRecord {
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string recipient = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Coin",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message Validator {
  string valoper_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string commission_rate = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string delegator_shares = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string voting_power = 4 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string score = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message DelegatorIntent {
  string delegator = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated ValidatorIntent intents = 2;
}

message ValidatorIntent {
  string valoper_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string weight = 2 [
    (gogoproto.moretags) = "yaml:\"relative_weight\"",
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message Delegation {
  string delegation_address = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string validator_address = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  cosmos.base.v1beta1.Coin amount = 3 [
    (cosmos_proto.scalar) = "cosmos.Coin",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  int64 height = 4;
  int64 redelegation_end = 5;
}

message PortConnectionTuple {
  string connection_id = 1;
  string port_id = 2;
}

message Receipt {
  string chain_id = 1;
  string sender = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string txhash = 3;
  repeated cosmos.base.v1beta1.Coin amount = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message DelegationPlan {
  string validatorAddress = 1
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string delegatorAddress = 2
      [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  repeated cosmos.base.v1beta1.Coin value = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  uint64 delegation_account_count = 1;
  uint64 deposit_interval = 2;
  uint64 validatorset_interval = 3;
  string commission_rate = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message DelegationsForZone {
  string chain_id = 1;
  repeated Delegation delegations = 2;
}

message DelegationPlansForZone {
  string chain_id = 1;
  map<string, DelegationPlan> delegation_plans = 2;
}

message DelegatorIntentsForZone {
  string chain_id = 1;
  repeated DelegatorIntent delegation_intent = 2;
  bool snapshot = 3;
}

// GenesisState defines the interchainstaking module's genesis state.
message GenesisState {
  Params params = 1 [ (gogoproto.nullable) = false ];
  repeated Zone zones = 2 [ (gogoproto.nullable) = false ];
  repeated Receipt receipts = 3 [ (gogoproto.nullable) = false ];
  repeated DelegationsForZone delegations = 4 [ (gogoproto.nullable) = false ];
  repeated DelegationPlansForZone delegation_plans = 5
      [ (gogoproto.nullable) = false ];
  repeated DelegatorIntentsForZone delegator_intents = 6
      [ (gogoproto.nullable) = false ];
  repeated PortConnectionTuple port_connections = 7
      [ (gogoproto.nullable) = false ];
}
