syntax = "proto3";
package quicksilver.airdrop.v1;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/ingenuity-build/quicksilver/x/airdrop/types";

// Action is used as an enum to denote specific actions or tasks.
enum Action {
  option (gogoproto.goproto_enum_prefix) = false;

  ActionInitialClaim = 0;
  ActionVote = 1;
  ActionDelegateStake = 2;
}

// Status is used as an enum to denote zone status.
enum Status {
  option (gogoproto.goproto_enum_prefix) = false;
  
  StatusActive = 0;
  StatusFuture = 1;
  StatusExpired = 2;
}

// ZoneDrop represents an airdrop for a specific zone.
message ZoneDrop {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  google.protobuf.Timestamp start_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  google.protobuf.Duration duration = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration,omitempty",
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
  google.protobuf.Duration decay = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "decay,omitempty",
    (gogoproto.moretags) = "yaml:\"decay\""
  ];
  uint64 allocation = 5;
  repeated string actions = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  bool is_concluded = 7;
}

// ClaimRecord represents a users' claim (including completed claims) for a
// given zone.
message ClaimRecord {
  option (gogoproto.goproto_getters) = false;

  string chain_id = 1;
  string address = 2;
  // Protobuf3 does not allow enum as map key
  map<int32, CompletedAction> action_completed = 3;
  uint64 max_allocation = 4;
}

// CompletedAction represents a claim action completed by the user.
message CompletedAction {
  option (gogoproto.goproto_getters) = false;
  
  google.protobuf.Timestamp complete_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"complete_time\""
  ];
  uint64 claim_amount = 2;
}
